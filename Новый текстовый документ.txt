


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1
Вопрос №1: Особенности сервисно-ориентированной архитектура. Её основные принципы.
Сервисно-ориентированная архитектура (SOA) является подходом к разработке программного обеспечения, в котором функциональность приложения представлена как независимые службы, которые могут взаимодействовать друг с другом через сеть. Вот основные принципы SOA:

•	**Службы как основные строительные блоки**: Приложение делится на отдельные службы, каждая из которых предоставляет конкретную функциональность. Эти службы могут быть переиспользованы и объединены для создания сложных систем.

•	**Локация независимости**: Службы в SOA могут находиться в разных местах сети и общаться друг с другом посредством стандартных протоколов.

•	**Слабая связанность**: Службы в SOA должны быть слабо связаны друг с другом, что позволяет изменять или обновлять их независимо без влияния на другие части системы.

•	**Использование стандартов**: Для обмена данными и выполнения запросов между службами в SOA используются стандартные протоколы, такие как SOAP, REST, XML, JSON и другие.

•	**Обеспечение безопасности**: SOA предусматривает механизмы для обеспечения безопасности информации при обмене между службами, включая аутентификацию, авторизацию и шифрование данных.

•	**Управление службами и цикл жизни**: Службы в SOA должны быть управляемыми и иметь жизненный цикл, включающий такие этапы, как создание, публикация, обновление, отзыв и масштабирование.

•	**Высокая доступность и масштабируемость**: SOA позволяет строить системы с высокой доступностью и масштабируемостью, благодаря возможности добавления новых служб или увеличения количества экземпляров существующих служб.

•	**Использование соглашений о качестве обслуживания (SLA)**: В SOA можно определять SLA для каждой службы, определяя уровень обслуживания и согласованные параметры работы.

SOA облегчает разработку гибких, расширяемых и масштабируемых систем, позволяя компаниям быстро адаптироваться к изменяющимся требованиям бизнеса.
Вопрос №2: Модульное тестирование. Понятие, основные методы, алгоритм выполнения, преимущества и недостатки.
Модульное тестирование - это процесс тестирования отдельных модулей или компонентов программного обеспечения независимо от других частей системы. Этот вид тестирования позволяет выявить дефекты в отдельных частях кода и обеспечить их исправление до интеграции всех компонентов в единую систему.

Основные методы модульного тестирования включают в себя:
1. **Методы белого ящика (White-box testing)** - тестирование, основанное на знании внутренней структуры и логики работы модуля.
   
2. **Методы черного ящика (Black-box testing)** - тестирование, основанное на функциональном поведении модуля без знания его внутренней реализации.

Алгоритм выполнения модульного тестирования обычно включает следующие шаги:
1. **Планирование** - определение целей тестирования, выбор модулей для тестирования и разработка плана тестирования.
   
2. **Подготовка** - создание тестовых случаев, данных и среды для проведения тестирования.
   
3. **Исполнение тестов** - запуск тестов, фиксация результатов выполнения и анализ полученных данных.
   
4. **Анализ результатов** - оценка соответствия результатов тестирования ожидаемым и выявление дефектов.
   
5. **Фиксация и отслеживание дефектов** - регистрация выявленных проблем и отслеживание процесса их устранения.

Преимущества модульного тестирования:
- Раннее выявление и исправление дефектов.
- Улучшение качества кода и уменьшение вероятности появления ошибок.
- Упрощение отладки и облегчение обновлений кода.
- Повышение уровня надёжности и устойчивости приложения.

Недостатки модульного тестирования:
- Не всегда возможно полностью покрыть все возможные сценарии использования модуля.
- Требуется дополнительные усилия и ресурсы на разработку и поддержку тестов.
- Могут возникать сложности при тестировании взаимодействия между различными модулями.

Тем не менее, модульное тестирование является важным инструментом разработки программного обеспечения для обеспечения его качества и стабильности.
Практическое задание: Разработайте код программного модуля, который среди K первых членов последовательности вида:1,1+1/2,1+1/2+1/3,... находит первый, больший заданного числа A. Проведите тестирование модуля NUnix тестом.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 2
Вопрос №1: Определение уровня доступа в системе контроля версий информационной системы. Уровень доступа в системе контроля версий информационной системы определяет, какие пользователи или группы пользователей имеют право выполнять определенные действия с файлами и данными в рамках системы контроля версий. Это важный аспект для обеспечения безопасности и конфиденциальности информации, а также контроля над процессом разработки и изменения кода.

Обычно система контроля версий предоставляет следующие уровни доступа:

1. **Чтение (Read)** - право просматривать содержимое файлов и историю изменений, но не имеет возможности вносить изменения.

2. **Запись (Write)** - право изменять файлы, добавлять новые версии и комментарии к изменениям.

3. **Администрирование (Admin)** - полные права на управление репозиторием, включая настройку доступа, создание веток, удаление файлов и т.д.

Кроме того, для повышения безопасности данные уровни доступа могут быть дополнены другими механизмами контроля, такими как:

- **Аутентификация** - подтверждение личности пользователя перед предоставлением доступа к системе.
- **Авторизация** - установление прав доступа на основе идентификации пользователя.
- **Аудит** - регистрация действий пользователей для последующего анализа и контроля.

Определение правильных уровней доступа в системе контроля версий позволяет управлять процессом разработки, предотвращать несанкционированные изменения и обеспечивать сохранность данных. Разработчики и администраторы должны внимательно настраивать доступы с учетом требований проекта и политик безопасности организации.

Вопрос №2: Каскадная и спиральная модель: сходства и различия.
Каскадная и спиральная модели являются двумя типами жизненного цикла разработки программного обеспечения. Несмотря на то, что они имеют некоторые сходства, такие как последовательность выполнения этапов и внимание к контролю качества, у них есть и существенные различия.

Сходства:

1. Обе модели предполагают последовательное выполнение этапов разработки программного обеспечения.
2. Они уделяют внимание контролю качества на каждом этапе процесса разработки.
3. Обе модели предусматривают определенные этапы реализации, тестирования и сопровождения программного продукта.

Различия:

1. Каскадная модель предполагает линейное выполнение этапов разработки, в то время как спиральная модель предполагает циклическое повторение этапов в процессе разработки.
2. В каскадной модели изменения и дополнения к проекту могут быть сложными и требуют значительных затрат, в то время как спиральная модель предусматривает гибкий подход к разработке, позволяя вносить изменения на любом этапе процесса.
3. Спиральная модель предполагает активное взаимодействие с заказчиком и возможность быстрой реакции на его требования, в отличие от каскадной модели, где изменения могут быть затруднены из-за приведения в соответствие предыдущих этапов.

Таким образом, выбор между каскадной и спиральной моделями зависит от конкретных требований проекта, его сложности и возможности гибкости при изменении требований клиента.








ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 3
Вопрос №1: Основные инструменты среды для создания, исполнения и управления информационной системой.
•	Языки программирования (например, Java, Python, C++, PHP) - используются для написания кода и создания логики информационной системы.

•	Системы управления базами данных (например, MySQL, Oracle, MongoDB) - используются для хранения и управления данными, которые обрабатываются информационной системой.

•	Интегрированные среды разработки (IDE) (например, Eclipse, Visual Studio) - обеспечивают удобную среду для написания, отладки и тестирования кода информационной системы.

•	Веб-серверы и серверные технологии (например, Apache, Nginx, Node.js) - используются для хостинга и обработки веб-приложений и веб-сайтов.

•	Серверы приложений (например, JBoss, Tomcat) - обеспечивают выполнение приложений на сервере и поддержку многопользовательской работы.

•	Системы управления контентом (Content Management Systems, CMS) (например, WordPress, Drupal) - используются для управления содержимым и структурой веб-сайтов.

•	Инструменты тестирования (например, Selenium, JUnit) - используются для автоматизации тестирования информационной системы и обеспечения ее качества.

•	Системы мониторинга и аналитики (например, Google Analytics, New Relic) - используются для отслеживания производительности и работы информационной системы, а также для сбора и анализа данных о ее использовании.

•	Эти инструменты играют ключевую роль в создании, исполнении и управлении информационными системами, обеспечивая эффективную работу и обслуживание различных видов приложений и ресурсов.
Вопрос №2: Методология тестирования сложных систем. Понятие сложной системы.
Сложные системы - это системы, в которых взаимосвязи между их элементами сложны и не всегда предсказуемы. Они могут быть составлены из множества компонентов, включать в себя сложные взаимодействия и иметь множество вариантов поведения. Методология тестирования сложных систем включает в себя использование различных подходов и техник, таких как стратегическое планирование тестирования, анализ рисков, проектирование тестов и автоматизация тестирования. Важно учитывать особенности каждой конкретной сложной системы и адаптировать методологию тестирования под нее для эффективного обеспечения качества продукта.
Практическое задание: Cоздать приложение графический калькулятор на языке C# с помощью Windows Forms.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________








ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 4
Вопрос №1: Структуры среды разработки. Факторы при выборе.
•	Среда разработки (IDE - Integrated Development Environment) является важным инструментом для разработчиков программного обеспечения. Она предоставляет различные функции и инструменты, упрощающие процесс создания, отладки и тестирования программ. 

•	Структуры среды разработки могут существенно отличаться друг от друга, но обычно они состоят из следующих основных элементов:

•	Редактор кода: позволяет писать и редактировать исходный код программы с подсветкой синтаксиса и автодополнением.

•	Компилятор и исполнитель: инструменты для компиляции и исполнения кода.

•	Отладчик: позволяет обнаруживать и исправлять ошибки в программе.

•	Средства управления версиями: может включать интеграцию с системами контроля версий, такими как Git.

•	Панели инструментов: предоставляют быстрый доступ к различным функциям среды разработки.

•	При выборе среды разработки необходимо учитывать следующие факторы:

•	Язык программирования: не все среды разработки поддерживают все языки программирования, поэтому необходимо выбрать среду, совместимую с используемым языком.

•	Функциональность: необходимо учитывать не только основные возможности среды разработки, но и дополнительные инструменты, такие как интеграция с отладчиками, управление проектами и т.д.

•	Легкость использования: среда разработки должна быть удобной и интуитивно понятной для пользователя, чтобы упростить работу.

•	Совместимость: среда разработки должна быть совместима с используемой операционной системой и другими инструментами разработки.

•	Сообщество и поддержка: важно выбрать среду разработки с активным сообществом пользователей и хорошей технической поддержкой.

•	Цена и лицензия: необходимо учитывать бюджет и лицензионные условия при выборе среды разработки.

•	Учитывая вышеперечисленные факторы, разработчики могут выбрать наиболее подходящую для своих задач и предпочтений среду разработки.
Вопрос №2: Тестирование: понятие, критерии. Требования к тестированию. Процесс проведения отладки 
Тестирование - это процесс проверки программного обеспечения с целью обнаружения ошибок и дефектов. Критерии тестирования определяются на основе требований к программе и включают в себя функциональные и нефункциональные характеристики. Функциональные критерии определяют ожидаемое поведение программы, а нефункциональные - ее производительность, надежность, безопасность и прочие аспекты.

Требования к тестированию включают следующие основные аспекты:

1. Планирование тестирования - определение стратегии и методов тестирования, составление плана тестирования.
2. Разработка тестов - создание набора тестовых случаев на основе требований к программе.
3. Выполнение тестов - проведение тестов и регистрация результатов.
4. Оценка результатов - анализ результатов тестирования, выявление дефектов и ошибок.
5. Устранение дефектов - передача найденных ошибок и их исправление разработчикам.

Процесс отладки программного обеспечения включает в себя следующие этапы:

1. Выявление дефекта - обнаружение неожиданного поведения программы или некорректной работы функциональности.
2. Воспроизведение дефекта - последовательное воспроизведение дефекта для выяснения его причины.
3. Анализ проблемы - выявление и анализ причин возникновения дефекта.
4. Исправление ошибки - разработка и внедрение патча или исправления для устранения дефекта.
5. Повторное тестирование - проверка исправленной версии программы на наличие других дефектов.

Эффективное тестирование и отладка помогают обеспечить высокое качество программного обеспечения и улучшить пользовательский опыт.
Практическое задание: Cоздать приложение форма авторизации через логин и пароль, на языке C# с помощью Windows Forms.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________








ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 5
Вопрос №1: Интеграция модуля в информационную систему.
Интеграция модуля в информационную систему - это процесс объединения функционального блока или программного модуля с существующей информационной системой для обеспечения их взаимодействия и взаимодействия. Это может включать в себя разработку необходимых интерфейсов, передачу данных между модулями, настройку параметров и тестирование работы системы в целом после интеграции модуля. В результате успешной интеграции модуля в информационную систему пользователи получают доступ к новым функциям и возможностям, что повышает эффективность и удобство использования системы.
Вопрос №2: Каскадная модель жизненного цикла. Последовательность этапов. Особенности разработки по каскадной модели.
•	Каскадная модель жизненного цикла – одна из классических моделей разработки программного обеспечения. Она предполагает последовательное выполнение определенных этапов процесса разработки без возврата к предыдущему этапу. 

•	Этапы каскадной модели жизненного цикла обычно включают: 

•	Определение требований – на этом этапе анализируются и формулируются требования к программному продукту.
•	Проектирование – проектируются архитектура и дизайн программного продукта на основе предыдущего этапа.
•	Разработка – на этом этапе кодируется программное обеспечение с учетом сформулированных требований и проектирования.
•	Тестирование – программное обеспечение подвергается тестированию для выявления ошибок и устранения их.
•	Внедрение и сопровождение – развертывание программного продукта на рабочем окружении и последующее обновление и поддержка.

•	Особенности разработки по каскадной модели включают в себя:
•	- Жесткое последовательное выполнение этапов: каждый этап начинается после завершения предыдущего и не допускается возврат к предыдущим этапам.
•	- Отсутствие гибкости: изменения требований или дизайна на поздних этапах могут быть затруднительными и дорогостоящими.
•	- Четкое планирование: необходимо четко определить требования и проектирование до начала разработки, чтобы избежать проблем на поздних этапах.
•	- Подходит для проектов с жесткими и стабильными требованиями, когда изменения в процессе разработки не предполагаются.

•	Хотя каскадная модель имеет свои ограничения, она все еще широко используется в различных отраслях, таких как авиационная и медицинская промышленность, где требования к программному обеспечению строго регулируются.
Практическое задание: Разработайте код программного модуля для определения суммы всех элементов натурального массива N, которые не равны максимальному. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 6
Вопрос №1: Понятие спецификации языка программирования в информационной системе.
Спецификация языка программирования в информационной системе - это документ, который описывает синтаксис и семантику языка программирования, его возможности и ограничения. Этот документ обычно содержит информацию о структуре программы, типах данных, операторах, функциях и других элементах языка.

Спецификация языка программирования помогает разработчикам понять, как правильно использовать язык для написания программ, а также обеспечивает согласованность и единообразие в разработке программного обеспечения.
Вопрос №2: Тестирование методом «черного ящика». Типы и область тестирования, примеры.
•	Тестирование методом "черного ящика" (Black Box Testing) - это метод тестирования программного обеспечения, при котором тестировщик не имеет доступа к внутренней структуре кода или реализации программы. Вместо этого тестирование проводится на основе внешних характеристик программы и ее функциональности.

•	Типы тестирования методом "черного ящика":
•	Функциональное тестирование - проверка соответствия функциональных требований программы.
•	Нефункциональное тестирование - проверка нефункциональных аспектов программы, таких как производительность, надежность, безопасность и т.д.
•	Тестирование пользовательского интерфейса - проверка удобства использования интерфейса программы.
•	Тестирование совместимости - проверка работоспособности программы на различных платформах и окружениях.
•	Тестирование безопасности - проверка уязвимостей и защищенности программы.

•	Примеры тестов методом "черного ящика":
•	Проверка функциональности ввода данных: ввод корректных и некорректных данных и проверка реакции программы.
•	Тестирование работы функций программы: проверка правильности выполнения операций и результатов.
•	Тестирование интерфейса: проверка взаимодействия пользователя с интерфейсом программы.
•	Тестирование производительности: проверка скорости работы программы при различных условиях.
•	Тестирование безопасности: проверка уровня защиты программы от внешних угроз.

•	Тестирование методом "черного ящика" позволяет оценить программу с точки зрения конечного пользователя и обнаружить ошибки, которые могут быть недоступны при других методах тестирования.
Практическое задание: Разработайте код программного модуля для решения квадратного уравнения ах2 + bх + с = 0. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________










ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 7
Вопрос №1: Диаграммы: вариантов использования, последовательности, кооперации.
•	Диаграммы вариантов использования (Use Case), последовательности (Sequence) и кооперации (Collaboration) - это типы диаграмм UML (Unified Modeling Language), которые используются для моделирования различных аспектов системы. Давайте рассмотрим каждый тип диаграммы более подробно:

•	Диаграмма вариантов использования (Use Case):
•	- Диаграмма вариантов использования описывает функциональность системы с точки зрения актеров (пользователей) и их взаимодействия с системой.
•	- На диаграмме вариантов использования отображаются варианты использования (use cases) - конкретные сценарии, в которых актеры взаимодействуют с системой для достижения определенной цели.
•	- Диаграмма вариантов использования помогает определить функциональные требования к системе и понять, какие действия могут выполнять пользователи.

•	Диаграмма последовательности (Sequence):
•	- Диаграмма последовательности показывает последовательность обмена сообщениями между объектами или участниками системы в определенном сценарии использования.
•	- На диаграмме последовательности отображаются объекты (или участники), которые участвуют в сценарии, и сообщения, которые они обмениваются друг с другом.
•	- Диаграмма последовательности помогает визуализировать порядок выполнения операций или действий в системе и выявить потенциальные проблемы взаимодействия объектов.

•	Диаграмма кооперации (Collaboration):
•	- Диаграмма кооперации показывает взаимодействие между объектами или участниками системы без учета последовательности сообщений.
•	- На диаграмме кооперации отображаются объекты (или участники), их ассоциации и сообщения, которые они могут обмениваться друг с другом.
•	- Диаграмма кооперации помогает понять структуру и взаимодействие объектов в системе и может использоваться для проектирования архитектуры программного обеспечения.

•	Использование диаграмм вариантов использования, последовательности и кооперации позволяет лучше понять требования к системе, ее структуру и взаимодействие между компонентами, что помогает разработчикам создавать более качественное программное обеспечение.
Вопрос №2: Характеристики программного продукта. Этапы решения задач. Понятие алгоритма и его свойства.
•	Характеристики программного продукта:
•	Функциональность: определяет способность программы выполнять определенные задачи и функции.
•	Надежность: указывает на стабильность и корректность работы программы в различных условиях.
•	Производительность: характеризует скорость работы программы, эффективное использование ресурсов и возможность масштабирования.
•	Удобство использования: оценивает удобство интерфейса программы, интуитивность и простоту взаимодействия с пользователем.
•	Сопровождаемость: указывает на возможность модификации, доработки и поддержки программного продукта в долгосрочной перспективе.

•	Этапы решения задач:
•	Понимание проблемы: анализ задачи, определение требований и постановка целей.
•	Проектирование решения: разработка алгоритма, выбор структур данных, проектирование интерфейса.
•	Разработка программы: написание кода, тестирование, отладка.
•	Тестирование и отладка: проверка работоспособности программы, исправление ошибок.
•	Внедрение и поддержка: установка программы на целевое устройство, обновления, поддержка пользователей.

•	Понятие алгоритма и его свойства:
•	- Алгоритм - это последовательность шагов или инструкций, которая описывает способ решения определенной задачи.
•	- Свойства алгоритма:
•	Дискретность: алгоритм должен состоять из конечного числа шагов, каждый из которых должен быть четко определен.
•	Определенность: каждый шаг алгоритма должен быть однозначно понятен и выполним.
•	Входные данные: алгоритм должен иметь определенные входные данные, на основе которых он будет работать.
•	Выходные данные: алгоритм должен возвращать определенный результат или решение задачи.
•	Конечность: алгоритм должен завершаться за конечное количество шагов.
•	Эффективность: алгоритм должен быть эффективным в использовании ресурсов (времени, памяти).

•	Понимание характеристик программного продукта, этапов решения задач и свойств алгоритма помогает разработчикам создавать эффективные и надежные программные продукты, которые соответствуют требованиям пользователей и бизнес-задачам.
Практическое задание: Cоздать приложение текстовый редактор, применяя технологию разработки многооконного приложения на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________









ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 8
Вопрос №1: Структура и виды CASE-средств. Критерии при выборе.
CASE (Computer-Aided Software Engineering) - это набор инструментов и методов, предназначенных для автоматизации процессов разработки программного обеспечения. CASE-средства помогают упростить и ускорить разработку, тестирование, анализ и управление проектами.

Структура CASE-средства обычно включает в себя следующие компоненты:
1. Графический редактор для создания диаграмм и моделей.
2. Модуль для создания и редактирования кода.
3. Средства для анализа и тестирования программного обеспечения.
4. Средства для управления проектами и документацией.
5. Интегрированная среда разработки (IDE) для работы с различными языками программирования.

Виды CASE-средств:
1. Верхнеуровневые CASE-средства: предоставляют широкий спектр инструментов для моделирования бизнес-процессов, анализа требований, проектирования систем и генерации кода.
2. Среднеуровневые CASE-средства: ориентированы на конкретные этапы жизненного цикла разработки ПО, такие как проектирование баз данных или создание интерфейсов.
3. Нижнеуровневые CASE-средства: предоставляют инструменты для написания и отладки программного кода.

Критерии при выборе CASE-средства:
1. Функциональность: соответствие возможностей CASE-средства требованиям проекта.
2. Интеграция: возможность интеграции с другими инструментами разработки ПО.
3. Удобство использования: интуитивный интерфейс, поддержка стандартов и шаблонов.
4. Поддержка языков программирования: возможность работы с используемыми в проекте языками программирования.
5. Стоимость: соотношение цены и качества предоставляемых функций.
6. Надежность и безопасность: стабильность работы, защита данных и конфиденциальность информации.

Выбор подходящего CASE-средства зависит от особенностей проекта, требований заказчика и предпочтений команды разработчиков. Правильный выбор CASE-средства может значительно ускорить и улучшить процесс разработки программного обеспечения.
Вопрос №2: Санитарное тестирование. Понятие, основные методы, алгоритм выполнения, преимущества, примеры санитарного тестирования, отличия от дымового тестирования.
Санитарное тестирование (Sanity Testing) - это вид тестирования программного обеспечения, направленный на проверку основных функций приложения после внесения небольших изменений или исправлений. Целью санитарного тестирования является убеждение в том, что основные функции приложения работают корректно после внесенных изменений, не приводя к серьезным ошибкам или сбоям.

Основные методы санитарного тестирования:
1. Проверка основных функций: тестирование ключевых функций приложения.
2. Проверка целостности: убеждение в том, что изменения не повлияли на целостность приложения.
3. Проверка связанных функций: проверка взаимодействия между основными функциями.

Алгоритм выполнения санитарного тестирования:
1. Определение области изменений: определение области кода или функционала, который был изменен или исправлен.
2. Выбор ключевых функций: выбор основных функций приложения для тестирования.
3. Подготовка тестовых сценариев: разработка тестовых сценариев для проверки основных функций.
4. Выполнение тестов: запуск тестовых сценариев и анализ результатов.
5. Оценка результатов: оценка корректности работы основных функций после внесенных изменений.

Преимущества санитарного тестирования:
1. Эффективность: позволяет быстро проверить основные функции приложения после внесенных изменений.
2. Экономия времени: не требует полного перезапуска всех тестов, что экономит время.
3. Устранение базовых ошибок: помогает выявить базовые ошибки и проблемы после изменений.

Примеры санитарного тестирования:
1. Проверка работы авторизации пользователя после изменения дизайна страницы входа.
2. Проверка отправки формы заказа товара после добавления нового поля.
3. Проверка отображения списка товаров после изменения фильтров.

Отличия санитарного тестирования от дымового тестирования:
- Санитарное тестирование проверяет основные функции приложения после небольших изменений, в то время как дымовое тестирование выполняется для проверки работоспособности приложения в целом перед релизом.
- Санитарное тестирование ориентировано на проверку ключевых функций, в то время как дымовое тестирование проводится для выявления серьезных проблем или сбоев.
- Санитарное тестирование обычно выполняется быстрее и имеет более узкую область покрытия по сравнению с дымовым тестированием.
Практическое задание: Разработайте код программного модуля для перестановки натурального числа N так, чтобы образовалось наибольшее число, записанное теми же цифрами. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________




ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 9
Вопрос №1: Диаграммы: развертывания, компонентов, потоков данных.
 Диаграммы развертывания, компонентов и потоков данных являются важными инструментами в процессе проектирования и анализа программного обеспечения. Давайте рассмотрим каждую из них более подробно:

1. Диаграмма развертывания (Deployment Diagram):
- Диаграмма развертывания показывает физическую структуру системы, то есть как компоненты системы размещаются на аппаратном обеспечении (например, сервера, узлы, устройства).
- На диаграмме развертывания отображаются узлы (например, серверы), компоненты приложения и связи между ними.
- Данная диаграмма помогает понять архитектурные аспекты системы, такие как масштабируемость, надежность, доступность и т.д.

2. Диаграмма компонентов (Component Diagram):
- Диаграмма компонентов показывает структуру системы на уровне компонентов и их взаимосвязей.
- На диаграмме компонентов отображаются компоненты (например, классы, модули, библиотеки), интерфейсы и зависимости между компонентами.
- Данная диаграмма помогает понять модульную структуру системы, а также выделить ключевые компоненты и их взаимодействие.

3. Диаграмма потоков данных (Data Flow Diagram - DFD):
- Диаграмма потоков данных показывает поток данных в системе, отображая как данные передаются между процессами, хранилищами данных и внешними сущностями.
- На диаграмме потоков данных используются символы для представления процессов, хранилищ данных, потоков данных и внешних сущностей.
- Данная диаграмма помогает анализировать логику обработки данных в системе, выявлять возможные узкие места и оптимизировать поток данных.

Использование всех трех типов диаграмм (развертывания, компонентов, потоков данных) в процессе проектирования и анализа системы позволяет лучше понять её структуру, взаимосвязи компонентов и потоки данных. Каждая из этих диаграмм имеет свои специфические цели и помогает рассмотреть систему с разных точек зрения.
Вопрос №2: Тестирование методом «серого ящика». Стратегия, преимущества и проблемы тестирования. Область тестирования. Этапы выполнения тестирования.
•	Тестирование методом "серого ящика" (Gray Box Testing) - это метод тестирования программного обеспечения, который сочетает в себе элементы как "белого ящика" (White Box Testing) и "черного ящика" (Black Box Testing). При этом тестировщик имеет частичное знание о внутренней структуре системы, но не полное.

•	### Стратегия тестирования методом "серого ящика":
•	- Использование комбинации техник тестирования, включая тестирование функциональности, структурное тестирование и другие методы.
•	- Использование информации о спецификациях системы, документации и коде для создания эффективных тестов.
•	- Анализ внутренней структуры системы для определения критических точек и уязвимостей.

•	### Преимущества тестирования методом "серого ящика":
•	Позволяет более эффективно выявлять ошибки и дефекты в программном обеспечении.
•	Обеспечивает более полное покрытие тестами, чем при использовании только "черного ящика".
•	Позволяет оптимизировать процесс тестирования и улучшить качество разрабатываемого продукта.

•	### Проблемы тестирования методом "серого ящика":
•	Требует дополнительных знаний о внутренней структуре системы, что может потребовать дополнительных ресурсов и времени.
•	Может быть сложно оценить объем и степень покрытия тестами при использовании этого метода.
•	Не всегда возможно получить доступ к внутренней структуре системы из-за ограничений или ограничений безопасности.

•	### Область тестирования:
•	- Тестирование методом "серого ящика" может применяться для различных типов тестирования, включая функциональное тестирование, интеграционное тестирование, регрессионное тестирование и др.
•	- Этот метод особенно полезен при тестировании сложных систем, где необходимо сочетать знание о функциональности и структуре системы.

•	### Этапы выполнения тестирования методом "серого ящика":
•	Анализ требований и спецификаций системы.
•	Изучение внутренней структуры системы (кода) и выявление критических точек.
•	Разработка тестовых случаев на основе полученной информации.
•	Выполнение тестов и анализ результатов.
•	Оценка покрытия тестами и корректировка стратегии тестирования при необходимости.

•	Таким образом, тестирование методом "серого ящика" представляет собой эффективный подход к проверке программного обеспечения, который позволяет объединить преимущества "белого ящика" и "черного ящика". Однако для успешной реализации этого метода необходимо иметь достаточное понимание как функциональности, так и структуры системы.
Практическое задание: Разработайте код программного модуля для определения количества элементов натурального массива N, больших двух своих соседей, и вывод количества таких элементов. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________





ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 10
Вопрос №1: Построение архитектуры проекта информационной системы.
•	Построение архитектуры проекта информационной системы - это ключевой этап в разработке программного обеспечения, который определяет структуру системы, взаимодействие ее компонентов, способы обработки данных и обеспечивает основу для дальнейшей реализации и сопровождения системы. Важно учитывать требования к производительности, безопасности, масштабируемости и другие аспекты при проектировании архитектуры.

•	### Основные шаги построения архитектуры проекта информационной системы:

•	Определение требований:
•	- Проведение анализа требований к системе, включая функциональные, нефункциональные и технические требования.
•	- Определение основных целей и задач, которые должна решать система.

•	Разработка концептуальной модели:
•	- Создание высокоуровневой концепции архитектуры системы, определяющей ее основные компоненты и взаимосвязи между ними.
•	- Выбор подходящих архитектурных стилей (например, клиент-серверная архитектура, микросервисная архитектура и др.).

•	Проектирование детальной архитектуры:
•	- Разработка более детальной модели системы, включающей спецификацию компонентов, интерфейсов, данных и взаимодействий между ними.
•	- Выбор технологий и инструментов для реализации каждого компонента.

•	Определение уровней доступа и безопасности:
•	- Установление правил доступа к данным и функциональности системы для различных пользовательских ролей.
•	- Разработка механизмов защиты информации и обеспечения безопасности системы.

•	Управление данными:
•	- Определение структуры баз данных, выбор подходящих технологий хранения и обработки данных.
•	- Разработка механизмов резервного копирования и восстановления данных.

•	Оптимизация производительности:
•	- Учет требований к производительности системы при выборе архитектурных решений.
•	- Разработка стратегий кэширования, оптимизации запросов к базам данных и других методов оптимизации.

•	Документирование архитектуры:
•	- Создание подробной документации по архитектуре системы, описывающей все компоненты, интерфейсы и принятые решения.
•	- Обеспечение актуальности документации в процессе разработки и сопровождения системы.

•	Проведение обзоров и ревью:
•	- Проведение обзоров архитектуры с участием команды разработчиков, заказчика и других заинтересованных сторон.
•	- Исправление выявленных ошибок и уточнение деталей архитектуры на основе обратной связи.

•	### Инструменты для построения архитектуры проекта информационной системы:

•	Диаграммы UML (Unified Modeling Language) для визуализации структуры системы, компонентов, взаимосвязей и поведения.
•	Инструменты CASE (Computer-Aided Software Engineering) для автоматизации процесса проектирования архитектуры.
•	Средства моделирования для создания 3D-моделей или прототипов интерфейсов.
•	Инструменты контроля версий для отслеживания изменений в архитектуре и совместной работы над проектом.

•	Построение архитектуры проекта информационной системы требует комплексного подхода, включающего не только технические аспекты, но и учет требований заказчика, бизнес-потребностей и возможных изменений в будущем. Важно создать гибкую и масштабируемую архитектуру, способную эффективно поддерживать развитие и сопровождение системы.
Вопрос №2: Интеграционное тестирование. Понятие, цель и объект тестирования. Методы и инструменты тестирования.
•	Интеграционное тестирование - это вид тестирования, направленный на проверку взаимодействия между различными компонентами или модулями программного обеспечения после их объединения в единую систему. Цель интеграционного тестирования заключается в обнаружении ошибок, связанных с интеграцией компонентов, а также проверке корректности передачи данных и взаимодействия между ними.

•	### Цели интеграционного тестирования:

•	Проверка взаимодействия между компонентами системы.
•	Обнаружение ошибок, связанных с интеграцией компонентов.
•	Проверка корректности передачи данных между компонентами.
•	Подтверждение соответствия системы требованиям и спецификациям.
•	Повышение уверенности в работоспособности системы перед выпуском в эксплуатацию.

•	### Объекты интеграционного тестирования:

•	Интеграция компонентов - проверка взаимодействия между различными компонентами системы.
•	Передача данных - проверка корректности передачи данных между компонентами.
•	Интерфейсы и API - проверка работы интерфейсов и API системы.
•	Бизнес-логика - проверка корректности выполнения бизнес-логики при взаимодействии компонентов.

•	### Методы и инструменты интеграционного тестирования:

•	Методы тестирования:
•	- Сценарные тесты - тестирование сценариев использования системы.
•	- Тестирование API - проверка работы программных интерфейсов.
•	- Тестирование данных - проверка корректности передачи данных между компонентами.
•	- Тестирование интерфейсов - проверка работы пользовательских интерфейсов.

•	Инструменты тестирования:
•	- JUnit - для написания и запуска автоматических тестов.
•	- Postman - для тестирования API.
•	- Selenium - для автоматизации тестирования пользовательского интерфейса.
•	- SoapUI - для тестирования веб-сервисов.

•	Интеграционное тестирование является важным этапом в разработке программного обеспечения, помогая выявить ошибки, связанные с взаимодействием компонентов, до выпуска системы в эксплуатацию. Автоматизация тестирования с помощью специализированных инструментов позволяет повысить эффективность процесса и ускорить выявление проблемных моментов.
Практическое задание: Разработайте код программного модуля, который сортирует одномерный массив «методом пузырька». Проведите тестирование модуля NUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________







ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 11
Вопрос №1: Мониторинг разработки проекта информационной системы.
Мониторинг разработки проекта информационной системы - это процесс отслеживания и контроля за ходом разработки проекта, который включает в себя сбор, анализ и использование информации о ходе выполнения проекта. Он позволяет своевременно выявлять проблемы и риски, а также принимать меры для их устранения или минимизации. Мониторинг разработки проекта включает в себя следующие этапы:

1. Планирование мониторинга: определение целей и задач мониторинга, выбор методов и инструментов для его проведения.

2. Сбор данных: сбор информации о ходе выполнения проекта, включая данные о затратах, сроках, качестве и других параметрах.

3. Анализ данных: анализ собранной информации для выявления проблем и рисков, а также оценки эффективности работы команды разработчиков.

4. Принятие мер: принятие решений на основе анализа данных, направленных на устранение проблем и минимизацию рисков.

5. Отчетность: подготовка отчетов о ходе выполнения проекта для руководства и заинтересованных сторон.

Мониторинг разработки проекта информационной системы является важным элементом управления проектами, который позволяет обеспечить успешное завершение проекта в срок и в рамках бюджета.
Вопрос №2: Регрессивное тестирование. Понятие, необходимость, методы проведения регрессивного тестирования. Выбор регрессивного теста и тестовых случаев. Различия между повторным тестированием и регрессивным. Проблемы регрессивного тестирования.
Регрессивное тестирование - это процесс проверки программного обеспечения после внесения изменений в его код или функциональность. Необходимость проведения регрессивного тестирования возникает в случае, когда в программе были внесены изменения, которые могут повлиять на ее работу. Регрессивное тестирование позволяет убедиться, что новые изменения не привели к появлению новых ошибок или не повлияли на работу уже существующих функций.

Методы проведения регрессивного тестирования могут быть различными. Один из наиболее распространенных методов - это повторное выполнение уже проведенных тестов. Также можно использовать специальные инструменты для автоматического регрессивного тестирования, которые позволяют быстро и эффективно проверить большое количество тестовых случаев.

Выбор регрессивного теста и тестовых случаев зависит от того, какие изменения были внесены в программу. Например, если были внесены изменения в функциональность, то необходимо провести регрессивное тестирование этой функциональности. Если же были внесены изменения в код, то необходимо провести регрессивное тестирование всех функций, которые могут быть затронуты этими изменениями.

Различия между повторным тестированием и регрессивным заключаются в том, что повторное тестирование проводится после исправления ошибок, а регрессивное тестирование - после внесения изменений в программу. Повторное тестирование направлено на проверку исправления ошибок, а регрессивное тестирование - на проверку того, что новые изменения не привели к появлению новых ошибок.

Проблемы регрессивного тестирования могут быть связаны с тем, что не все изменения могут быть проверены с помощью регрессивного тестирования. Например, если изменения были внесены в код, который не был ранее протестирован, то регрессивное тестирование не сможет выявить ошибки в этом коде. Также проблемы могут возникать при выборе тестовых случаев для регрессивного тестирования, так как не всегда можно определить, какие изменения могут повлиять на работу программы.
Практическое задание: Cоздать приложение для генерации паролей на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 12
Вопрос №1: Интегрированные среды разработки для создания независимых программ: назначение, сфера применения.
Интегрированные среды разработки (IDE) - это программные инструменты, которые предоставляют разработчикам все необходимые инструменты для создания, отладки и развертывания программного обеспечения. Они включают в себя редактор кода, отладчик, компилятор, сборщик мусора и другие инструменты, которые могут быть необходимы для разработки программного обеспечения.

Интегрированные среды разработки могут быть использованы для создания независимых программ, которые могут работать на различных платформах и операционных системах. Они предоставляют разработчикам возможность создавать программы, которые могут быть запущены на различных устройствах, таких как компьютеры, мобильные телефоны, планшеты и другие устройства.

Сфера применения интегрированных сред разработки очень широка. Они могут быть использованы для создания различных типов программного обеспечения, включая веб-приложения, мобильные приложения, настольные приложения и другие типы программного обеспечения. Они также могут быть использованы для создания программного обеспечения для различных отраслей, таких как финансы, здравоохранение, образование и другие.

Некоторые из наиболее популярных интегрированных сред разработки включают в себя Visual Studio от Microsoft, Eclipse от IBM, IntelliJ IDEA от JetBrains и другие. Каждая из этих сред имеет свои особенности и может быть использована для создания различных типов программного обеспечения.
Вопрос №2: Определение, цель и этапы тестирования производительности. Критерии для измеряемых метрик.
Тестирование производительности - это процесс проверки того, насколько быстро и эффективно работает программное обеспечение или система. Цель тестирования производительности заключается в определении, насколько хорошо система работает под нагрузкой и как она справляется с большим количеством пользователей или данных.

Этапы тестирования производительности могут включать в себя:

1. Определение целей тестирования: определение того, какие аспекты производительности системы необходимо проверить.

2. Планирование тестирования: определение объема тестирования, выбор инструментов и методов тестирования.

3. Сбор данных: сбор данных о производительности системы, таких как время выполнения операций, использование ресурсов и т.д.

4. Анализ данных: анализ собранных данных для определения проблемных мест в системе.

5. Устранение проблем: устранение проблем, выявленных в результате тестирования.

Критерии для измеряемых метрик могут включать в себя:

- Время выполнения операций: время, затрачиваемое на выполнение операций в системе.

- Использование ресурсов: использование процессора, памяти, сети и других ресурсов системы.

- Количество пользователей: количество пользователей, которые могут одновременно использовать систему.

- Скорость загрузки: время, затрачиваемое на загрузку системы.

- Скорость ответа: время, затрачиваемое на получение ответа от системы.

- Пропускная способность: количество данных, которые могут быть обработаны системой за определенный период времени.

- Надежность: способность системы работать без сбоев и ошибок.

- Удобство использования: насколько легко и удобно использовать систему для пользователей.
Практическое задание: Разработайте код программного модуля, который определяет вид, треугольника, заданного длинами его сторон: равносторонний, равнобедренный, прямоугольный, разносторонний. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________
 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 13
Вопрос №1: Спецификация настроек типовой информационной системы.
Спецификация настроек типовой информационной системы - это документ, который описывает все настройки и параметры, необходимые для работы информационной системы. В спецификации настроек типовой информационной системы обычно указываются следующие параметры:

1. Название и описание информационной системы.

2. Версия программного обеспечения, на котором работает система.

3. Список всех компонентов системы, включая базы данных, серверы приложений, клиентские приложения и т.д.

4. Настройки безопасности, включая пароли доступа к системе и права пользователей.

5. Настройки сетевого взаимодействия, включая IP-адреса серверов и порты.

6. Настройки хранения данных, включая местоположение файлов и баз данных.

7. Настройки резервного копирования и восстановления данных.

8. Настройки мониторинга и управления системой.

9. Настройки интеграции с другими системами.

10. Настройки конфигурации системы, включая параметры операционной системы, серверов приложений и клиентских приложений.

11. Настройки пользовательского интерфейса, включая расположение элементов управления и стиль оформления.

12. Настройки отчетов и аналитики.

13. Настройки обновлений и исправлений системы.

14. Настройки документации и обучения пользователей.

Спецификация настроек типовой информационной системы является важным документом, который позволяет быстро и эффективно настроить систему для работы в соответствии с требованиями заказчика.
Вопрос №2: Экспертный подход к юзабилити-тестированию: критерии. Преимущества и недостатки подхода.
•	Экспертный подход к юзабилити-тестированию - это метод оценки удобства использования программного обеспечения, при котором эксперты анализируют продукт и дают свои оценки и рекомендации по улучшению его юзабилити.

•	Критерии экспертного подхода к юзабилити-тестированию могут включать в себя:

•	Навигация: насколько легко пользователи могут перемещаться по интерфейсу и находить нужную информацию.

•	Понятность: насколько ясно и понятно представлен интерфейс и его элементы.

•	Эффективность: насколько быстро и эффективно пользователи могут выполнять задачи с помощью продукта.

•	Запоминаемость: насколько легко пользователи могут запомнить, как использовать продукт и его функции.

•	Удовлетворенность: насколько пользователи довольны продуктом и его использованием.

•	Преимущества экспертного подхода к юзабилити-тестированию включают:

•	Быстрота: эксперты могут быстро оценить продукт и дать свои рекомендации по улучшению его юзабилити.

•	Глубина анализа: эксперты могут провести более глубокий анализ продукта и выявить проблемы, которые могут быть не видны при других методах тестирования.

•	Объективность: эксперты могут дать объективную оценку продукта, не зависящую от личных предпочтений пользователей.

•	Экономия времени и ресурсов: экспертный подход может быть более экономичным, чем проведение пользовательского тестирования, так как не требует большого количества участников.

•	Недостатки экспертного подхода к юзабилити-тестированию включают:

•	Ограниченность: эксперты могут не учитывать некоторые аспекты продукта, которые могут быть важны для пользователей.

•	Субъективность: оценки экспертов могут быть субъективными и зависеть от их опыта и знаний.

•	Отсутствие обратной связи: эксперты не могут получить обратную связь от пользователей, что может привести к неправильным выводам.

•	Ограниченность в масштабе: экспертный подход может быть ограничен в масштабе и не может быть использован для оценки больших продуктов или систем.
Практическое задание: Разработайте код программного модуля, который моделирует работу стека. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________
 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 14
Вопрос №1: Методы обеспечения кроссплатформенности информационной системы.
•	Методы обеспечения кроссплатформенности информационной системы включают в себя:

•	Использование кроссплатформенных языков программирования, таких как Java, Python, Ruby и другие.

•	Использование кроссплатформенных фреймворков и библиотек, таких как React, Angular, Node.js и другие.

•	Использование кроссплатформенных инструментов разработки, таких как Electron, Cordova, Xamarin и другие.

•	Использование кроссплатформенных технологий для хранения данных, таких как SQLite, PostgreSQL и другие.

•	Использование кроссплатформенных инструментов для сборки и развертывания приложений, таких как Gradle, Maven, Docker и другие.

•	Тестирование на различных платформах и устройствах для обеспечения совместимости.

•	Разработка адаптивного дизайна интерфейса, который будет корректно отображаться на различных устройствах и разрешениях экрана.

•	Использование кроссплатформенных инструментов для управления версиями и контроля качества кода, таких как Git, Jenkins и другие.

•	Обучение разработчиков работе с кроссплатформенными технологиями и инструментами.

•	Постоянное обновление и поддержка системы для обеспечения совместимости с новыми версиями операционных систем и устройств.
Вопрос №2: Определение и цель ручного тестирования. Преимущества и недостатки ручного тестирования. Типы тестирования.
•	Ручное тестирование - это процесс проверки программного обеспечения вручную, без использования автоматизированных инструментов. Цель ручного тестирования заключается в выявлении ошибок и проблем в программном обеспечении, которые могут быть пропущены при автоматическом тестировании.

•	Преимущества ручного тестирования включают:

•	Глубокий анализ: ручное тестирование позволяет проводить более глубокий анализ программного обеспечения, так как тестировщик может сосредоточиться на конкретных функциях и сценариях использования.

•	Гибкость: ручное тестирование позволяет быстро реагировать на изменения в требованиях и функциональности программного обеспечения.

•	Уникальность: ручное тестирование позволяет создавать уникальные тестовые случаи, которые не могут быть воспроизведены автоматически.

•	Человеческий фактор: ручное тестирование позволяет учитывать человеческий фактор при использовании программного обеспечения, что может быть важно для некоторых типов приложений.

•	Недостатки ручного тестирования включают:

•	Ограниченность: ручное тестирование может быть ограничено в масштабе и не может быть использовано для проверки большого количества функций или сценариев использования.

•	Время: ручное тестирование может занимать больше времени, чем автоматическое тестирование, так как требует участия человека.

•	Ошибки: ручное тестирование может быть подвержено ошибкам, так как тестировщик может пропустить некоторые ошибки или неправильно интерпретировать результаты тестирования.

•	Типы тестирования, которые могут быть выполнены вручную, включают в себя:

•	Функциональное тестирование: проверка соответствия программного обеспечения функциональным требованиям.

•	Нагрузочное тестирование: проверка производительности программного обеспечения при различных нагрузках.

•	Тестирование безопасности: проверка безопасности программного обеспечения и его защиты от внешних атак.

•	Тестирование удобства использования: проверка удобства использования программного обеспечения и его соответствия пользовательским требованиям.

•	Тестирование совместимости: проверка совместимости программного обеспечения с различными операционными системами, браузерами и устройствами.

•	Тестирование интеграции: проверка совместимости программного обеспечения с другими системами и приложениями.
Практическое задание: Разработайте код программного модуля, в котором обрабатываются следующие исключительные ситуации: "отрицательное значение возраста" и "год рождения больше текущего". Проведите тестирование модуля MSUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 15
Вопрос №1: Выбор технических средств проекта информационной системы.
•	Выбор технических средств проекта информационной системы - это процесс определения и выбора аппаратного и программного обеспечения, необходимого для реализации проекта. Этот процесс включает в себя следующие этапы:

•	Определение требований к техническим средствам: на этом этапе определяются функциональные и технические требования к аппаратному и программному обеспечению, которые должны быть удовлетворены в рамках проекта.

•	Анализ рынка: на этом этапе проводится анализ рынка, чтобы определить доступные технические средства, которые соответствуют требованиям проекта.

•	Оценка технических средств: на этом этапе проводится оценка технических средств, чтобы определить их соответствие требованиям проекта.

•	Выбор технических средств: на этом этапе выбираются технические средства, которые наилучшим образом соответствуют требованиям проекта.

•	Закупка и установка технических средств: на этом этапе закупаются и устанавливаются выбранные технические средства.

•	Тестирование и настройка: на этом этапе проводится тестирование и настройка технических средств, чтобы убедиться в их работоспособности и соответствии требованиям проекта.

•	Поддержка и обновление: на этом этапе обеспечивается поддержка и обновление технических средств, чтобы они оставались актуальными и соответствовали требованиям проекта.

•	Важно отметить, что выбор технических средств проекта информационной системы должен основываться на конкретных требованиях проекта и учитывать такие факторы, как бюджет, сроки, производительность, надежность и безопасность.
Вопрос №2: Подходы к формированию тестовых наборов: описание, примеры.
•	Подходы к формированию тестовых наборов могут быть различными и зависят от целей тестирования, типа программного обеспечения и других факторов. Рассмотрим несколько примеров подходов к формированию тестовых наборов:

•	Функциональное тестирование: в этом случае тестовые наборы формируются на основе функциональных требований к программному обеспечению. Каждый тестовый набор содержит набор тестовых случаев, которые проверяют выполнение определенной функции или группы функций.

•	Нагрузочное тестирование: в этом случае тестовые наборы формируются на основе требований к производительности программного обеспечения. Каждый тестовый набор содержит набор тестовых случаев, которые проверяют производительность программного обеспечения при различных нагрузках.

•	Тестирование безопасности: в этом случае тестовые наборы формируются на основе требований к безопасности программного обеспечения. Каждый тестовый набор содержит набор тестовых случаев, которые проверяют защиту программного обеспечения от внешних атак и уязвимостей.

•	Тестирование удобства использования: в этом случае тестовые наборы формируются на основе требований к удобству использования программного обеспечения. Каждый тестовый набор содержит набор тестовых случаев, которые проверяют удобство использования интерфейса и функциональности программного обеспечения.

•	Тестирование совместимости: в этом случае тестовые наборы формируются на основе требований к совместимости программного обеспечения с различными операционными системами, браузерами и устройствами. Каждый тестовый набор содержит набор тестовых случаев, которые проверяют совместимость программного обеспечения с различными платформами.

•	Примеры подходов к формированию тестовых наборов могут быть различными и зависят от конкретных требований проекта и типа программного обеспечения. Важно выбирать подход, который наилучшим образом соответствует целям тестирования и обеспечивает максимальную эффективность процесса тестирования.
Практическое задание: Разработайте код программного модуля для определения произведения цифр трехзначного числа. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 16
Вопрос №1: Средства обработки информации: определение, виды.
Средства обработки информации - это инструменты и технологии, которые используются для сбора, хранения, обработки и передачи информации. Они включают в себя аппаратное и программное обеспечение, а также различные методы и алгоритмы обработки данных.

Виды средств обработки информации могут быть различными и зависят от конкретных задач и требований. Рассмотрим некоторые из них:

1. Аппаратные средства: это физические устройства, которые используются для сбора, хранения и обработки информации. К ним относятся компьютеры, серверы, мобильные устройства, принтеры, сканеры и другие устройства.

2. Программные средства: это программы и приложения, которые используются для обработки информации. К ним относятся операционные системы, базы данных, офисные приложения, графические редакторы и другие программы.

3. Методы и алгоритмы обработки данных: это математические и логические методы, которые используются для анализа и обработки информации. К ним относятся статистические методы, методы машинного обучения, алгоритмы поиска и сортировки данных и другие методы.

4. Сети и коммуникации: это технологии, которые используются для передачи информации между устройствами и системами. К ним относятся сети передачи данных, беспроводные технологии, интернет и другие средства связи.

5. Хранение данных: это технологии и методы, которые используются для хранения информации. К ним относятся жесткие диски, флэш-накопители, облачные хранилища и другие средства хранения данных.

6. Управление данными: это методы и инструменты, которые используются для управления данными и обеспечения их безопасности. К ним относятся системы управления базами данных, системы управления контентом, системы управления версиями и другие средства управления данными.

7. Интеллектуальные системы: это системы, которые используют искусственный интеллект и машинное обучение для анализа и обработки информации. К ним относятся системы распознавания образов, системы автоматического перевода, системы рекомендаций и другие интеллектуальные системы.

Выбор средств обработки информации зависит от конкретных задач и требований проекта. Важно выбирать средства, которые наилучшим образом соответствуют целям проекта и обеспечивают эффективную обработку информации.
Вопрос №2: Функциональное тестирование. Понятие, основные функции, условия ошибки, режим выполнения. Примеры функционального тестирования. 
•	Функциональное тестирование - это процесс проверки соответствия программного обеспечения функциональным требованиям. Основная цель функционального тестирования заключается в проверке того, что программное обеспечение выполняет все необходимые функции в соответствии с требованиями заказчика.

•	Основные функции функционального тестирования включают:

•	Проверка функциональности: проверка того, что программное обеспечение выполняет все необходимые функции в соответствии с требованиями заказчика.

•	Проверка корректности: проверка того, что программное обеспечение работает корректно и не содержит ошибок.

•	Проверка производительности: проверка того, что программное обеспечение работает быстро и эффективно.

•	Проверка удобства использования: проверка того, что программное обеспечение удобно в использовании и соответствует требованиям пользователя.

•	Условия ошибки функционального тестирования могут быть различными и зависят от конкретных требований проекта. Однако, некоторые общие условия ошибки могут включать:

•	Несоответствие функциональности: программное обеспечение не выполняет все необходимые функции в соответствии с требованиями заказчика.

•	Ошибки в работе: программное обеспечение содержит ошибки, которые приводят к неправильной работе или сбоям.

•	Низкая производительность: программное обеспечение работает медленно или неэффективно, что приводит к задержкам или неудобствам для пользователя.

•	Неудобство использования: программное обеспечение неудобно в использовании, что приводит к затруднениям или ошибкам при работе с ним.

•	Режим выполнения функционального тестирования может быть различным и зависит от конкретных требований проекта. Однако, некоторые общие режимы выполнения функционального тестирования могут включать:

•	Ручное тестирование: тестировщик вручную проверяет функциональность программного обеспечения, выполняя тестовые случаи.

•	Автоматизированное тестирование: тестирование выполняется автоматически с помощью специальных инструментов и программ.

•	Комбинированное тестирование: сочетание ручного и автоматизированного тестирования для достижения наилучших результатов.

•	Примеры функционального тестирования могут быть различными и зависят от конкретных требований проекта. Однако, некоторые общие примеры функционального тестирования могут включать:

•	Тестирование веб-сайта: проверка функциональности веб-сайта, включая навигацию, формы, загрузку страниц и другие функции.

•	Тестирование мобильного приложения: проверка функциональности мобильного приложения, включая навигацию, ввод данных, взаимодействие с камерой и другие функции.

•	Тестирование базы данных: проверка функциональности базы данных, включая создание, удаление, обновление и чтение данных.

•	Тестирование системы управления контентом: проверка функциональности системы управления контентом, включая создание, редактирование и публикацию контента.

•	Тестирование системы электронной коммерции: проверка функциональности системы электронной коммерции, включая оформление заказа, оплату и доставку товаров.
Практическое задание: Cоздать приложение графический редактор на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 17
Вопрос №1: Основные возможности среды разработки. Сходства и различия.
Основные возможности среды разработки включают в себя:

1. Редактор кода: среда разработки предоставляет редактор кода, который позволяет разработчикам создавать, редактировать и отлаживать код.

2. Отладчик: среда разработки предоставляет отладчик, который позволяет разработчикам отлаживать код и находить ошибки.

3. Компилятор: среда разработки предоставляет компилятор, который преобразует исходный код в исполняемый файл.

4. Интегрированная среда разработки (IDE): среда разработки предоставляет интегрированную среду разработки, которая объединяет все инструменты разработки в одном месте.

5. Библиотеки и фреймворки: среда разработки предоставляет доступ к библиотекам и фреймворкам, которые упрощают разработку и ускоряют процесс создания программного обеспечения.

6. Инструменты тестирования: среда разработки предоставляет инструменты тестирования, которые позволяют разработчикам проверять качество и надежность программного обеспечения.

7. Интеграция с системами контроля версий: среда разработки предоставляет интеграцию с системами контроля версий, такими как Git, которые позволяют разработчикам отслеживать изменения в коде и работать в команде.

8. Поддержка различных языков программирования: среда разработки поддерживает различные языки программирования, такие как Java, Python, C++, JavaScript и другие.

Сходства и различия между средами разработки могут быть различными и зависят от конкретных требований проекта и предпочтений разработчиков. Однако, некоторые общие сходства и различия могут включать:

Сходства:

1. Редактор кода: большинство сред разработки предоставляют редактор кода, который позволяет разработчикам создавать, редактировать и отлаживать код.

2. Отладчик: большинство сред разработки предоставляют отладчик, который позволяет разработчикам отлаживать код и находить ошибки.

3. Компилятор: большинство сред разработки предоставляют компилятор, который преобразует исходный код в исполняемый файл.

Различия:

1. Интегрированная среда разработки (IDE): некоторые среды разработки предоставляют интегрированную среду разработки, которая объединяет все инструменты разработки в одном месте, в то время как другие среды разработки могут не предоставлять такой возможности.

2. Библиотеки и фреймворки: различные среды разработки могут предоставлять доступ к различным библиотекам и фреймворкам, которые упрощают разработку и ускоряют процесс создания программного обеспечения.

3. Инструменты тестирования: различные среды разработки могут предоставлять различные инструменты тестирования, которые позволяют разработчикам проверять качество и надежность программного обеспечения.

4. Интеграция с системами контроля версий: некоторые среды разработки предоставляют интеграцию с системами контроля версий, такими как Git, которые позволяют разработчикам отслеживать изменения в коде и работать в команде, в то время как другие среды разработки могут не предоставлять такой возможности.

5. Поддержка различных языков программирования: различные среды разработки поддерживают различные языки программирования, такие как Java, Python, C++, JavaScript и другие, что может быть важным фактором при выборе среды разработки для конкретного проекта.
Вопрос №2: Цели и основные принципы тестирования.
•	Цели тестирования:

•	Проверка соответствия программного обеспечения функциональным требованиям.
•	Выявление ошибок и проблем в программном обеспечении.
•	Оценка производительности и надежности программного обеспечения.
•	Проверка удобства использования программного обеспечения.
•	Обеспечение качества программного обеспечения.

•	Основные принципы тестирования:

•	Непрерывность: тестирование должно проводиться на всех этапах жизненного цикла программного обеспечения.
•	Комплексность: тестирование должно охватывать все аспекты программного обеспечения, включая функциональность, производительность, надежность и удобство использования.
•	Автоматизация: тестирование должно быть автоматизировано, где это возможно, чтобы ускорить процесс и повысить его эффективность.
•	Документирование: результаты тестирования должны быть документированы для последующего анализа и использования.
•	Независимость: тестирование должно проводиться независимо от разработчиков, чтобы обеспечить объективность результатов.
•	Повторяемость: тестирование должно быть повторяемым, чтобы обеспечить воспроизводимость результатов.
•	Приоритетность: тестирование должно быть проведено в соответствии с приоритетами проекта и требованиями заказчика.
•	Координация: тестирование должно быть скоординировано с другими процессами разработки, чтобы обеспечить своевременное выполнение проекта.
•	Управление рисками: тестирование должно быть направлено на выявление и управление рисками, связанными с программным обеспечением.
•	Обучение: тестировщики должны быть обучены и иметь необходимые знания и навыки для проведения тестирования.
•	Практическое задание: Cоздать приложение для создания базы данных имен и фамилий на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 18
Вопрос №1: Особенности объектно-ориентированных языков программирования.
Особенности объектно-ориентированных языков программирования включают:

•	Инкапсуляция: возможность скрытия внутренней реализации объекта от внешнего мира.

•	Наследование: возможность создания новых классов на основе уже существующих классов.

•	Полиморфизм: возможность использования одного и того же имени для различных типов данных или методов.

•	Абстракция: возможность создания абстрактных классов и интерфейсов, которые определяют поведение объектов без конкретной реализации.

•	Динамическая типизация: возможность определения типов данных во время выполнения программы, а не во время компиляции.

•	Модульность: возможность разделения программы на модули, каждый из которых выполняет определенную функцию.

•	Открытость/закрытость: возможность расширения функциональности класса без изменения его исходного кода.

•	Сохраняемость: возможность сохранения состояния объекта между вызовами методов.

•	Объектность: возможность работы с объектами, а не с отдельными переменными.

•	Управление памятью: возможность автоматического управления памятью, что упрощает разработку программного обеспечения.

•	Интеграция: возможность интеграции с другими языками программирования и технологиями.

•	Расширяемость: возможность расширения функциональности программы путем добавления новых классов и методов.

•	Масштабируемость: возможность масштабирования программы для работы с большим объемом данных и высокой нагрузкой.

•	Тестируемость: возможность тестирования отдельных компонентов программы без необходимости тестирования всей программы целиком.

•	Поддержка стандартов: возможность использования стандартных библиотек и фреймворков, что упрощает разработку программного обеспечения.
Вопрос №2: Среда тестирования: понятие, настройка. Документированность процесса тестирования: тестовый план и отчёт.
Среда тестирования - это набор инструментов и ресурсов, которые используются для проведения тестирования программного обеспечения. Она может включать в себя различные инструменты для автоматизации тестирования, средства управления тестированием, среды разработки и отладки, а также другие инструменты, которые помогают в процессе тестирования.

Настройка среды тестирования включает в себя установку и настройку всех необходимых инструментов и ресурсов, а также создание тестовых данных и тестовых сценариев. Важно убедиться, что все инструменты работают корректно и соответствуют требованиям проекта.

Документированность процесса тестирования включает в себя создание тестового плана и отчета. Тестовый план - это документ, который описывает цели тестирования, критерии приемки, тестовые сценарии и другие детали, связанные с тестированием. Отчет - это документ, который содержит результаты тестирования, включая обнаруженные ошибки, время выполнения тестов и другую информацию.

Тестовый план и отчет являются важными документами, которые помогают организовать процесс тестирования и обеспечить его эффективность. Они позволяют команде тестирования ясно понимать цели и задачи тестирования, а также предоставляют информацию о прогрессе и результатах тестирования.

Важно отметить, что документированность процесса тестирования является ключевым элементом обеспечения качества программного обеспечения. Она помогает команде тестирования следить за ходом тестирования, выявлять проблемы и ошибки, а также принимать решения на основе полученных результатов.
Практическое задание: Разработайте код программного модуля для перестановки натурального числа N так, чтобы образовалось наименьшее число, записанное теми же цифрами. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 19
Вопрос №1: Система контроля версий: совместимость, установка, настройка.
Система контроля версий - это программное обеспечение, которое позволяет разработчикам отслеживать изменения в коде, работать в команде и обеспечивать безопасность и надежность программного обеспечения.

Совместимость системы контроля версий зависит от конкретной системы и может быть различной. Некоторые системы контроля версий совместимы с различными операционными системами и языками программирования, в то время как другие могут быть ограничены в своей совместимости.

Установка системы контроля версий может быть выполнена различными способами в зависимости от конкретной системы. Некоторые системы контроля версий могут быть установлены через веб-интерфейс, другие требуют установки на локальный компьютер.

Настройка системы контроля версий может включать в себя создание учетных записей пользователей, настройку прав доступа, настройку репозиториев и другие параметры. Важно убедиться, что все настройки соответствуют требованиям проекта и обеспечивают безопасность и надежность программного обеспечения.

Важно отметить, что система контроля версий является важным инструментом для разработки программного обеспечения и обеспечения его качества. Она позволяет разработчикам работать в команде, отслеживать изменения в коде, быстро исправлять ошибки и обеспечивать безопасность и надежность программного обеспечения.
Вопрос №2: Стадии разработки программного обеспечения: описание.
•	Стадии разработки программного обеспечения могут различаться в зависимости от методологии разработки, но обычно включают следующие этапы:

•	Анализ требований: на этом этапе определяются требования к программному обеспечению, включая функциональные и нефункциональные требования.

•	Проектирование: на этом этапе разрабатывается архитектура программного обеспечения, определяются компоненты системы и их взаимодействие.

•	Кодирование: на этом этапе разрабатывается исходный код программного обеспечения.

•	Тестирование: на этом этапе проводится тестирование программного обеспечения для выявления ошибок и проблем.

•	Развертывание: на этом этапе программное обеспечение устанавливается на целевую систему и готовится к использованию.

•	Поддержка: на этом этапе осуществляется поддержка программного обеспечения, включая исправление ошибок, обновление и улучшение функциональности.

•	Важно отметить, что эти стадии могут быть разбиты на более мелкие этапы или объединены в зависимости от конкретной методологии разработки. Например, в методологии Agile стадии разработки могут быть более гибкими и итеративными, а в методологии Waterfall стадии разработки могут быть более линейными и последовательными.
Практическое задание: Cоздать приложение рисования изображения на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 20
Вопрос №1: Принципы создания графического пользовательского интерфейса (GUI).
Принципы создания графического пользовательского интерфейса (GUI) включают в себя:

1. Простота и понятность: интерфейс должен быть простым и понятным для пользователя, чтобы он мог быстро и легко освоить его.

2. Интуитивность: интерфейс должен быть интуитивно понятным, чтобы пользователь мог легко понять, как использовать его без дополнительной инструкции.

3. Минимализм: интерфейс должен быть минималистичным, чтобы не отвлекать пользователя от выполнения задач.

4. Эстетика: интерфейс должен быть эстетически привлекательным, чтобы вызывать положительные эмоции у пользователя.

5. Удобство использования: интерфейс должен быть удобным в использовании, чтобы пользователь мог быстро и легко выполнять задачи.

6. Адаптивность: интерфейс должен быть адаптивным, чтобы корректно отображаться на различных устройствах и разрешениях экрана.

7. Соответствие бренду: интерфейс должен соответствовать бренду компании или продукта, чтобы создать единый стиль и узнаваемость.

8. Надежность: интерфейс должен быть надежным, чтобы пользователь мог доверять ему и использовать его без опасений.

9. Безопасность: интерфейс должен быть безопасным, чтобы защитить данные пользователя от несанкционированного доступа.

10. Поддержка: интерфейс должен иметь хорошую поддержку, чтобы пользователь мог получить помощь и ответы на свои вопросы.

Важно помнить, что принципы создания графического пользовательского интерфейса могут варьироваться в зависимости от конкретного проекта и требований заказчика. Однако, следование этим принципам поможет создать удобный, понятный и привлекательный интерфейс, который будет удовлетворять потребности пользователей.
Вопрос №2: Нефункциональное тестирование. Понятие, основные функции, условия ошибки, режим выполнения. Примеры нефункционального тестирования.
•	Нефункциональное тестирование - это процесс проверки программного обеспечения на соответствие нефункциональным требованиям, которые не связаны с функциональностью программы, но важны для ее работы.

•	Основные функции нефункционального тестирования включают:

•	Проверка производительности: проверка скорости работы программы, ее способности обрабатывать большие объемы данных и устойчивости к нагрузкам.

•	Тестирование безопасности: проверка защиты программы от несанкционированного доступа, уязвимостей и возможных атак.

•	Тестирование удобства использования: проверка удобства использования интерфейса программы, его интуитивности и соответствия ожиданиям пользователей.

•	Тестирование совместимости: проверка совместимости программы с различными операционными системами, браузерами и устройствами.

•	Тестирование масштабируемости: проверка способности программы масштабироваться для работы с большим объемом данных и высокой нагрузкой.

•	Условия ошибки нефункционального тестирования могут быть различными и зависят от конкретных требований проекта. Однако, некоторые общие условия ошибки могут включать:

•	Низкая производительность: программа работает медленно или неэффективно, что приводит к задержкам или неудобствам для пользователя.

•	Недостаточная безопасность: программа содержит уязвимости, которые могут привести к несанкционированному доступу или атакам.

•	Неудобство использования: интерфейс программы неудобен в использовании, что приводит к затруднениям или ошибкам при работе с ним.

•	Несоответствие требованиям совместимости: программа не совместима с определенными операционными системами, браузерами или устройствами.

•	Режим выполнения нефункционального тестирования может быть различным и зависит от конкретных требований проекта. Однако, некоторые общие режимы выполнения нефункционального тестирования могут включать:

•	Автоматизированное тестирование: тестирование выполняется автоматически с помощью специальных инструментов и программ.

•	Комбинированное тестирование: сочетание ручного и автоматизированного тестирования для достижения наилучших результатов.

•	Примеры нефункционального тестирования могут быть различными и зависят от конкретных требований проекта. Однако, некоторые общие примеры нефункционального тестирования могут включать:

•	Тестирование производительности: проверка скорости работы программы и ее способности обрабатывать большие объемы данных.

•	Тестирование безопасности: проверка защиты программы от несанкционированного доступа и возможных атак.

•	Тестирование удобства использования: проверка удобства использования интерфейса программы и его соответствия ожиданиям пользователей.

•	Тестирование совместимости: проверка совместимости программы с различными операционными системами, браузерами и устройствами.

•	Тестирование масштабируемости: проверка способности программы масштабироваться для работы с большим объемом данных и высокой нагрузкой.
Практическое задание: Cоздать прототип приложения по обмену валюты на языке C# с помощью Windows Forms.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________
 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 21
Вопрос №1: Определение конфигурации информационной системы.
Конфигурация информационной системы - это набор параметров, настроек и компонентов, которые определяют функциональность, производительность и безопасность системы. Она включает в себя аппаратное и программное обеспечение, сетевые настройки, параметры безопасности, пользовательские настройки и другие параметры, которые влияют на работу системы.

Определение конфигурации информационной системы является важным этапом в процессе разработки и внедрения системы. Оно позволяет определить требования к аппаратному и программному обеспечению, выбрать оптимальные настройки для работы системы, обеспечить безопасность данных и пользователей, а также обеспечить совместимость с другими системами и приложениями.

Определение конфигурации информационной системы может быть выполнено различными способами в зависимости от конкретной системы и требований проекта. Некоторые из них могут включать:

1. Анализ требований: определение функциональных и нефункциональных требований к системе, которые определяют ее конфигурацию.

2. Выбор аппаратного обеспечения: определение необходимых аппаратных компонентов, таких как серверы, рабочие станции, сетевое оборудование и другие устройства.

3. Выбор программного обеспечения: определение необходимых программных компонентов, таких как операционные системы, базы данных, приложения и другие программы.

4. Настройка сетевых параметров: определение сетевых настроек, таких как IP-адреса, маски подсети, шлюзы и другие параметры, которые влияют на работу системы.

5. Настройка параметров безопасности: определение параметров безопасности, таких как пароли, права доступа, механизмы аутентификации и другие параметры, которые обеспечивают защиту данных и пользователей.

6. Настройка пользовательских параметров: определение пользовательских настроек, таких как профили пользователей, права доступа, настройки интерфейса и другие параметры, которые влияют на работу системы.

Важно отметить, что определение конфигурации информационной системы является важным этапом в процессе разработки и внедрения системы, который требует тщательного анализа требований и выбора оптимальных параметров для работы системы.
Вопрос №2: Понятие жизненного цикла программного обеспечения. Стандарты и их классификация.
Жизненный цикл программного обеспечения (SDLC) - это последовательность этапов, которые проходят программное обеспечение от момента его зарождения до момента его прекращения использования. Стандарты жизненного цикла программного обеспечения определяют правила и рекомендации, которые должны быть соблюдены на каждом этапе жизненного цикла.

Существует несколько стандартов жизненного цикла программного обеспечения, которые классифицируются по различным критериям. Некоторые из них:

1. Водопадная модель (Waterfall model): это классическая модель жизненного цикла, которая представляет собой последовательность этапов, начиная от анализа требований и заканчивая поддержкой программного обеспечения.

2. Итеративная модель (Iterative model): это модель, в которой разработка программного обеспечения происходит итеративно, то есть каждый этап повторяется несколько раз, пока не будет достигнут желаемый результат.

3. Спиральная модель (Spiral model): это модель, которая объединяет в себе элементы водопадной и итеративной моделей. Она начинается с анализа требований и заканчивается поддержкой программного обеспечения, но каждый этап повторяется несколько раз, чтобы учесть риски и изменения требований.

4. Agile-модель (Agile model): это модель, которая предполагает быструю разработку программного обеспечения с использованием коротких итераций, которые называются спринтами.

5. Scrum-модель (Scrum model): это модель, которая является одной из наиболее популярных Agile-методологий. Она предполагает использование коротких спринтов, в которых команда разработчиков работает над определенным набором задач.

6. Kanban-модель (Kanban model): это модель, которая предполагает использование визуального управления задачами и ограничение количества задач, которые могут быть выполнены одновременно.

Каждый из этих стандартов имеет свои преимущества и недостатки, и выбор конкретного стандарта зависит от требований проекта, размера команды разработчиков и других факторов. Важно понимать, что стандарты жизненного цикла программного обеспечения помогают обеспечить качество и эффективность разработки программного обеспечения.
Практическое задание: Разработайте код программного модуля для определения последовательности из n действительных чисел. Найти сумму всех ее элементов. Проведите тестирование модуля xUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________







ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 22
Вопрос №1: Формирование репозитория проекта информационной системы.
•	Репозиторий проекта информационной системы - это место, где хранятся все файлы, связанные с проектом, включая исходный код, документацию, тестовые данные и другие ресурсы. Формирование репозитория проекта включает в себя следующие шаги:

•	Выбор системы контроля версий: перед началом работы над проектом необходимо выбрать систему контроля версий, которая будет использоваться для управления исходным кодом и другими ресурсами проекта.

•	Создание репозитория: после выбора системы контроля версий необходимо создать репозиторий, который будет использоваться для хранения всех файлов проекта.

•	Загрузка исходного кода: после создания репозитория необходимо загрузить в него исходный код проекта.

•	Загрузка документации: после загрузки исходного кода необходимо загрузить в репозиторий документацию проекта, включая техническую документацию, руководства пользователя и другие материалы.

•	Загрузка тестовых данных: после загрузки документации необходимо загрузить в репозиторий тестовые данные, которые будут использоваться для тестирования проекта.

•	Настройка прав доступа: после загрузки всех файлов необходимо настроить права доступа к репозиторию, чтобы только авторизованные пользователи могли получить доступ к файлам проекта.

•	Создание веток: после настройки прав доступа необходимо создать ветки в репозитории, которые будут использоваться для разработки и тестирования проекта.

•	Загрузка изменений: после создания веток необходимо загружать в них изменения исходного кода, документации и тестовых данных.

•	Обновление веток: после загрузки изменений необходимо обновлять ветки, чтобы они содержали последние версии файлов проекта.

•	Создание релизов: после завершения разработки и тестирования проекта необходимо создать релизы, которые будут использоваться для развертывания проекта на целевой системе.

•	Удаление старых веток: после создания релизов необходимо удалить старые ветки, которые больше не нужны для работы над проектом.

•	Важно отметить, что формирование репозитория проекта является важным этапом в процессе разработки информационной системы, который позволяет управлять исходным кодом, документацией и другими ресурсами проекта, а также обеспечивает безопасность и надежность проекта.
Вопрос №2: Спиральная модель жизненного цикла. Особенности и проблемы разработки по спиральной модели.
•	Спиральная модель жизненного цикла (Spiral model) - это модель разработки программного обеспечения, которая объединяет в себе элементы водопадной и итеративной моделей. Она представляет собой последовательность этапов, которые повторяются несколько раз, пока не будет достигнут желаемый результат.

•	Особенности спиральной модели:

•	Итеративность: каждый этап повторяется несколько раз, что позволяет учесть риски и изменения требований.

•	Анализ рисков: на каждом этапе проводится анализ рисков, что позволяет определить потенциальные проблемы и принять меры для их предотвращения.

•	Оценка: на каждом этапе проводится оценка, которая позволяет определить, насколько успешно был выполнен предыдущий этап и какие изменения необходимо внести в следующий.

•	Гибкость: спиральная модель позволяет быстро реагировать на изменения требований и адаптироваться к новым условиям.

•	Управление рисками: спиральная модель позволяет управлять рисками на каждом этапе, что повышает надежность и безопасность программного обеспечения.

•	Проблемы разработки по спиральной модели:

•	Высокая сложность: спиральная модель может быть сложной для понимания и применения, особенно для новичков в области разработки программного обеспечения.

•	Необходимость планирования: спиральная модель требует тщательного планирования каждого этапа, что может быть сложным и затратным.

•	Высокая стоимость: спиральная модель может быть дорогой из-за необходимости проведения анализа рисков и оценки на каждом этапе.

•	Ограниченность: спиральная модель может быть ограничена в своей применимости, так как не все проекты могут быть разработаны по этой модели.

•	Недостаток стандартов: спиральная модель не имеет четких стандартов и может быть применена по-разному в разных проектах.

•	В целом, спиральная модель жизненного цикла является эффективной и гибкой моделью разработки программного обеспечения, которая позволяет учесть риски и изменения требований, а также обеспечивает надежность и безопасность программного обеспечения. Однако, она может быть сложной для понимания и применения, а также дорогой и ограниченной в своей применимости.
Практическое задание: Разработайте код программного модуля, который определяет знак значения функции косинуса в зависимости от выбранной на форме четверти координатной плоскости. Проведите тестирование модуля MSUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________

ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 23
Вопрос №1: Разработка приложений для моделирования явлений.
•	Разработка приложений для моделирования явлений - это процесс создания программного обеспечения, которое позволяет имитировать и анализировать различные явления и процессы в реальном мире. Такие приложения могут использоваться в различных областях, включая науку, инженерию, медицину, финансы и другие.

•	Основные этапы разработки приложений для моделирования явлений включают:

•	Анализ требований: определение целей и задач проекта, а также требований к функциональности приложения.

•	Проектирование: разработка архитектуры приложения, определение структуры данных и алгоритмов.

•	Кодирование: написание исходного кода приложения на выбранном языке программирования.

•	Тестирование: проверка работоспособности и корректности приложения, выявление и исправление ошибок.

•	Развертывание: установка и настройка приложения на целевой системе.

•	Поддержка: обновление и улучшение приложения, исправление ошибок и добавление новых функций.

•	При разработке приложений для моделирования явлений необходимо учитывать следующие факторы:

•	Точность моделирования: приложение должно точно воспроизводить реальные явления и процессы.

•	Гибкость: приложение должно быть гибким и адаптивным, чтобы учитывать изменения в требованиях и условиях.

•	Масштабируемость: приложение должно быть способно обрабатывать большие объемы данных и работать с высокой нагрузкой.

•	Безопасность: приложение должно обеспечивать безопасность данных и защиту от несанкционированного доступа.

•	Удобство использования: приложение должно быть удобным и интуитивно понятным для пользователей.

•	Документированность: приложение должно иметь хорошо документированный код и инструкции по использованию.

•	Разработка приложений для моделирования явлений является сложным и многогранным процессом, который требует высокой квалификации и опыта разработчиков. Однако, правильно разработанное приложение может значительно повысить эффективность и точность анализа и прогнозирования различных явлений и процессов в реальном мире.
Вопрос №2: Тестирование методом «белого ящика». Типы и область тестирования, примеры. Преимущества и недостатки метода.
•	Тестирование методом «белого ящика» (White Box Testing) - это процесс тестирования программного обеспечения, при котором тестировщик имеет доступ к исходному коду программы. Этот метод позволяет тестировщику проверить внутреннюю структуру программы, включая алгоритмы, структуры данных и другие элементы.

•	Типы и область тестирования методом «белого ящика»:

•	Тестирование на основе структурного покрытия кода (Code Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыт код тестами. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе функционального покрытия кода (Functional Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты функциональные требования программы. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия данных (Data Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты данные в программе. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия потока управления (Control Flow Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты пути выполнения программы. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Примеры тестирования методом «белого ящика»:

•	Тестирование на основе структурного покрытия кода: тестировщик проверяет, насколько хорошо покрыт код тестами, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе функционального покрытия кода: тестировщик проверяет, насколько хорошо покрыты функциональные требования программы, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия данных: тестировщик проверяет, насколько хорошо покрыты данные в программе, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия потока управления: тестировщик проверяет, насколько хорошо покрыты пути выполнения программы, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Преимущества метода «белого ящика»:

•	Глубокое понимание программы: тестировщик имеет доступ к исходному коду программы, что позволяет ему лучше понять ее внутреннюю структуру и алгоритмы.

•	Более точное тестирование: тестировщик может проверить каждую строку кода, что позволяет выявить больше ошибок и проблем.

•	Улучшение качества кода: тестировщик может выявить области, которые требуют улучшения или оптимизации, что может привести к улучшению качества кода.

•	Недостатки метода «белого ящика»:

•	Высокая стоимость: тестирование методом «белого ящика» требует доступа к исходному коду программы, что может быть дорогостоящим.

•	Ограниченность: тестирование методом «белого ящика» не позволяет проверить интерфейс программы или ее взаимодействие с другими системами.

•	Сложность: тестирование методом «белого ящика» требует высокой квалификации и опыта тестировщика, так как необходимо понимать внутреннюю структуру программы и алгоритмы.

•	В целом, тестирование методом «белого ящика» является эффективным способом проверки программного обеспечения, который позволяет выявить больше ошибок и проблем, но требует высокой квалификации и опыта тестировщика.
Практическое задание: Разработайте код программного модуля для быстрой сортировки одномерного массива с использованием указателей и динамической памяти. Проведите тестирование модуля MSUnix тестом.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________
 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 24
Вопрос №1: Отладка приложения для информационной системы.
•	Отладка приложения для информационной системы - это процесс выявления и исправления ошибок в программном обеспечении, которые могут привести к неправильной работе системы. Отладка является важной частью жизненного цикла разработки программного обеспечения и позволяет обеспечить его корректную работу.

•	Основные этапы отладки приложения для информационной системы включают:

•	Анализ проблемы: определение проблемы, которая приводит к неправильной работе системы.

•	Поиск причины: определение причины проблемы, которая может быть связана с ошибками в коде, неправильной конфигурацией системы или другими факторами.

•	Исправление ошибки: исправление ошибки, которая приводит к неправильной работе системы.

•	Проверка исправления: проверка исправления, чтобы убедиться, что проблема была решена.

•	Документирование: документирование исправления, чтобы в будущем можно было быстро найти и исправить аналогичные проблемы.

•	Примеры ошибок, которые могут быть исправлены в процессе отладки приложения для информационной системы, включают:

•	Ошибки в коде: неправильно написанный код, который приводит к неправильной работе системы.

•	Ошибки в конфигурации: неправильная конфигурация системы, которая приводит к неправильной работе системы.

•	Ошибки в базе данных: неправильно написанные запросы к базе данных, которые приводят к неправильной работе системы.

•	Ошибки в интерфейсе пользователя: неправильно работающий интерфейс пользователя, который приводит к неправильной работе системы.

•	Ошибки в сетевом взаимодействии: неправильно работающие сетевые протоколы или соединения, которые приводят к неправильной работе системы.

•	Отладка приложения для информационной системы является важным этапом жизненного цикла разработки программного обеспечения, который позволяет обеспечить его корректную работу. Правильно проведенная отладка позволяет выявить и исправить ошибки в программном обеспечении, что повышает его надежность и безопасность.
Вопрос №2: Тестирование методом «белого ящика». Типы и область тестирования, примеры. Преимущества и недостатки метода.
•	Тестирование методом «белого ящика» (White Box Testing) - это процесс тестирования программного обеспечения, при котором тестировщик имеет доступ к исходному коду программы. Этот метод позволяет тестировщику проверить внутреннюю структуру программы, включая алгоритмы, структуры данных и другие элементы.

•	Типы и область тестирования методом «белого ящика»:

•	Тестирование на основе структурного покрытия кода (Code Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыт код тестами. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе функционального покрытия кода (Functional Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты функциональные требования программы. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия данных (Data Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты данные в программе. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия потока управления (Control Flow Coverage Based Testing): тестировщик проверяет, насколько хорошо покрыты пути выполнения программы. Это позволяет выявить области, которые не были протестированы или недостаточно протестированы.

•	Примеры тестирования методом «белого ящика»:

•	Тестирование на основе структурного покрытия кода: тестировщик проверяет, насколько хорошо покрыт код тестами, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе функционального покрытия кода: тестировщик проверяет, насколько хорошо покрыты функциональные требования программы, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия данных: тестировщик проверяет, насколько хорошо покрыты данные в программе, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Тестирование на основе покрытия потока управления: тестировщик проверяет, насколько хорошо покрыты пути выполнения программы, чтобы выявить области, которые не были протестированы или недостаточно протестированы.

•	Преимущества метода «белого ящика»:

•	Глубокое понимание программы: тестировщик имеет доступ к исходному коду программы, что позволяет ему лучше понять ее внутреннюю структуру и алгоритмы.

•	Более точное тестирование: тестировщик может проверить каждую строку кода, что позволяет выявить больше ошибок и проблем.

•	Улучшение качества кода: тестировщик может выявить области, которые требуют улучшения или оптимизации, что может привести к улучшению качества кода.

•	Недостатки метода «белого ящика»:

•	Высокая стоимость: тестирование методом «белого ящика» требует доступа к исходному коду программы, что может быть дорогостоящим.

•	Ограниченность: тестирование методом «белого ящика» не позволяет проверить интерфейс программы или ее взаимодействие с другими системами.

•	Сложность: тестирование методом «белого ящика» требует высокой квалификации и опыта тестировщика, так как необходимо понимать внутреннюю структуру программы и алгоритмы.

•	В целом, тестирование методом «белого ящика» является эффективным способом проверки программного обеспечения, который позволяет выявить больше ошибок и проблем, но требует высокой квалификации и опыта тестировщика.
Практическое задание: Создать тестовый сценарий на основе программного кода программы Form_HW, размещенной в папке C:\Документы\Экз. МДК 05.2-05.3\24, где 24 - номер билета. Все необходимые файлы находятся в папке.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 25
Вопрос №1: Требования к интерфейсу пользователя информационной системы.
Требования к интерфейсу пользователя информационной системы включают в себя следующие аспекты:

•	Простота и понятность: интерфейс должен быть простым и понятным для пользователя, чтобы он мог быстро и легко освоить его.

•	Интуитивность: интерфейс должен быть интуитивно понятным, чтобы пользователь мог легко понять, как использовать его без дополнительной инструкции.

•	Минимализм: интерфейс должен быть минималистичным, чтобы не отвлекать пользователя от выполнения задач.

•	Эстетика: интерфейс должен быть эстетически привлекательным, чтобы вызывать положительные эмоции у пользователя.

•	Удобство использования: интерфейс должен быть удобным в использовании, чтобы пользователь мог быстро и легко выполнять задачи.

•	Адаптивность: интерфейс должен быть адаптивным, чтобы корректно отображаться на различных устройствах и разрешениях экрана.

•	Соответствие бренду: интерфейс должен соответствовать бренду компании или продукта, чтобы создать единый стиль и узнаваемость.

•	Надежность: интерфейс должен быть надежным, чтобы пользователь мог доверять ему и использовать его без опасений.

•	Безопасность: интерфейс должен быть безопасным, чтобы защитить данные пользователя от несанкционированного доступа.

•	Поддержка: интерфейс должен иметь хорошую поддержку, чтобы пользователь мог получить помощь и ответы на свои вопросы.
Вопрос №2: Пользовательский подход к юзабилити-тестированию: критерии, методы измерения. Преимущества и недостатки подхода.
•	Пользовательский подход к юзабилити-тестированию - это метод оценки удобства использования программного обеспечения, основанный на мнении и опыте пользователей. Он позволяет получить обратную связь от реальных пользователей и выявить проблемы, которые могут быть незаметны для разработчиков.

•	Критерии, которые могут быть использованы при пользовательском подходе к юзабилити-тестированию, включают:

•	Удобство использования: насколько легко и удобно пользователь может выполнять задачи с помощью программного обеспечения.

•	Понятность: насколько понятен интерфейс программного обеспечения для пользователя.

•	Эффективность: насколько быстро и эффективно пользователь может выполнять задачи с помощью программного обеспечения.

•	Запоминаемость: насколько легко пользователь может запомнить, как использовать программное обеспечение.

•	Навигация: насколько легко пользователь может перемещаться по интерфейсу программного обеспечения.

•	Эстетика: насколько привлекательным и приятным для глаз является интерфейс программного обеспечения.

•	Методы измерения, которые могут быть использованы при пользовательском подходе к юзабилити-тестированию, включают:

•	Интервью: проведение интервью с пользователями, чтобы узнать их мнение о программном обеспечении и выявить проблемы.

•	Наблюдение: наблюдение за пользователями, которые используют программное обеспечение, чтобы выявить проблемы и ошибки.

•	Тестирование: проведение тестирования программного обеспечения с помощью реальных пользователей, чтобы выявить проблемы и ошибки.

•	Опрос: проведение опроса пользователей, чтобы узнать их мнение о программном обеспечении и выявить проблемы.

•	Преимущества пользовательского подхода к юзабилити-тестированию включают:

•	Получение обратной связи от реальных пользователей: пользовательский подход позволяет получить обратную связь от реальных пользователей, которые могут выявить проблемы, которые могут быть незаметны для разработчиков.

•	Улучшение удобства использования: пользовательский подход позволяет улучшить удобство использования программного обеспечения, основываясь на мнении и опыте пользователей.

•	Повышение эффективности: пользовательский подход позволяет повысить эффективность использования программного обеспечения, основываясь на мнении и опыте пользователей.

•	Недостатки пользовательского подхода к юзабилити-тестированию включают:

•	Ограниченность: пользовательский подход может быть ограничен в своей применимости, так как он основан на мнении и опыте пользователей, которые могут быть субъективными.

•	Время и затраты: проведение пользовательского подхода к юзабилити-тестированию может быть затратным и требовать значительного времени для проведения интервью, наблюдения и тестирования.

•	Ограниченность в оценке: пользовательский подход может быть ограничен в своей оценке, так как он основан на мнении и опыте пользователей, которые могут быть неполными или неточными.

•	В целом, пользовательский подход к юзабилити-тестированию является эффективным методом оценки удобства использования программного обеспечения, который позволяет получить обратную связь от реальных пользователей и выявить проблемы, которые могут быть незаметны для разработчиков. Однако, он может быть ограничен в своей применимости и требует значительного времени и затрат для проведения интервью, наблюдения и тестирования.
Практическое задание: Усовершенствовать программу, размещенную в папке C:\Документы\Экз. МДК 05.2-05.3\25, где 25 - номер билета. Все необходимые файлы находятся в папке.
    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________
 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 26
Вопрос №1: Программирование обмена сообщениями между модулями.
•	Программирование обмена сообщениями между модулями - это процесс разработки программного обеспечения, при котором модули программы обмениваются сообщениями для выполнения определенных задач. Этот подход позволяет организовать взаимодействие между различными частями программы и обеспечивает гибкость и масштабируемость системы.

•	Основные этапы программирования обмена сообщениями между модулями включают:

•	Определение структуры сообщений: определение формата и содержания сообщений, которые будут передаваться между модулями.

•	Определение протокола обмена сообщениями: определение правил и процедур, которые будут использоваться для передачи сообщений между модулями.

•	Разработка модулей: разработка отдельных модулей программы, которые будут обмениваться сообщениями.

•	Настройка коммуникационных каналов: настройка коммуникационных каналов, через которые будут передаваться сообщения между модулями.

•	Тестирование: тестирование системы на предмет корректной передачи сообщений между модулями и выполнения задач.

•	Преимущества программирования обмена сообщениями между модулями включают:

•	Гибкость: модули могут быть разработаны независимо друг от друга и могут быть легко заменены или обновлены без изменения других частей системы.

•	Масштабируемость: система может быть легко масштабирована путем добавления новых модулей или изменения существующих.

•	Управление зависимостями: модули могут быть разработаны таким образом, чтобы они не зависели друг от друга, что упрощает управление зависимостями и уменьшает риск ошибок.

•	Управление версиями: модули могут быть разработаны таким образом, чтобы они могли быть обновлены независимо друг от друга, что упрощает управление версиями и обеспечивает более быстрое развертывание новых функций.

•	Недостатки программирования обмена сообщениями между модулями включают:

•	Сложность: программирование обмена сообщениями между модулями может быть сложным и требует высокой квалификации разработчиков.

•	Накладные расходы: передача сообщений между модулями может потребовать дополнительных накладных расходов на обработку и передачу данных.

•	Ограничения: некоторые задачи могут быть сложно или невозможно решить с помощью программирования обмена сообщениями между модулями.

•	В целом, программирование обмена сообщениями между модулями является эффективным подходом к разработке программного обеспечения, который обеспечивает гибкость, масштабируемость и управление зависимостями. Однако, этот подход требует высокой квалификации разработчиков и может быть сложным в реализации.
Вопрос №2: Дымовое тестирование. Понятие, основные методы, алгоритм выполнения, преимущества, примеры дымового тестирования, отличия от санитарного тестирования.
•	Дымовое тестирование (Smoke Testing) - это процесс проверки основных функций и работоспособности программного обеспечения после его сборки или обновления. Это начальный этап тестирования, который проводится для того, чтобы убедиться, что программа работает в целом и не содержит критических ошибок.

•	Основные методы дымового тестирования включают:

•	Проверка основных функций: тестировщик проверяет, что основные функции программы работают корректно.

•	Проверка взаимодействия с окружением: тестировщик проверяет, что программа корректно взаимодействует с окружением, например, с операционной системой, браузером или другими программами.

•	Проверка на наличие критических ошибок: тестировщик проверяет, что программа не содержит критических ошибок, которые могут привести к ее неработоспособности.

•	Алгоритм выполнения дымового тестирования:

•	Определение основных функций программы: тестировщик определяет, какие функции программы являются основными и должны быть проверены.

•	Проверка основных функций: тестировщик проверяет каждую основную функцию программы, чтобы убедиться, что она работает корректно.

•	Проверка взаимодействия с окружением: тестировщик проверяет, что программа корректно взаимодействует с окружением, например, с операционной системой, браузером или другими программами.

•	Проверка на наличие критических ошибок: тестировщик проверяет, что программа не содержит критических ошибок, которые могут привести к ее неработоспособности.

•	Преимущества дымового тестирования:

•	Быстрота: дымовое тестирование проводится быстро и позволяет быстро выявить критические ошибки.

•	Простота: дымовое тестирование не требует глубокого знания программы и может быть проведено даже неспециалистами.

•	Эффективность: дымовое тестирование позволяет быстро выявить критические ошибки и убедиться в работоспособности программы.

•	Примеры дымового тестирования:

•	Проверка загрузки программы: тестировщик проверяет, что программа корректно загружается и не выдает ошибок.

•	Проверка основных функций: тестировщик проверяет, что основные функции программы работают корректно, например, создание нового документа, сохранение изменений, печать и т.д.

•	Проверка взаимодействия с окружением: тестировщик проверяет, что программа корректно взаимодействует с окружением, например, с операционной системой, браузером или другими программами.

•	Отличия от санитарного тестирования:

•	Цель: дымовое тестирование проводится для проверки основных функций и работоспособности программы, в то время как санитарное тестирование проводится для проверки соответствия программы требованиям безопасности и конфиденциальности.

•	Глубина проверки: дымовое тестирование проводится на поверхностном уровне и не требует глубокого знания программы, в то время как санитарное тестирование требует более глубокого знания программы и ее функциональности.

•	Время выполнения: дымовое тестирование проводится быстро и может быть выполнено даже неспециалистами, в то время как санитарное тестирование требует больше времени и может быть выполнено только специалистами.
Практическое задание: Написать программу решения квадратного уравнения аx^2+ bх + с = 0. Минимизировать набор тестов для программы нахождения вещественных корней квадратного уравнения. Тесты размещены в папке C:\Документы\Экз. МДК 05.2-05.3\26, где 26 - номер билета. Все необходимые файлы находятся в папке.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________

 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 27
Вопрос №1: Организация ввода-вывода информационной системы
•	Организация ввода-вывода в информационной системе - это процесс управления данными, которые поступают в систему и выходят из нее. Это включает в себя определение способов ввода и вывода данных, а также управление этими процессами.

•	Основные этапы организации ввода-вывода в информационной системе включают:

•	Определение требований к вводу-выводу: определение того, какие данные должны быть введены в систему и какие данные должны быть выведены из нее.

•	Выбор методов ввода-вывода: выбор наиболее подходящих методов ввода и вывода данных, таких как клавиатура, мышь, сканер, принтер и т.д.

•	Разработка интерфейса пользователя: разработка интерфейса пользователя, который позволяет пользователю легко и удобно вводить и выводить данные.

•	Настройка устройств ввода-вывода: настройка устройств ввода-вывода, таких как клавиатура, мышь, сканер, принтер и т.д., чтобы они корректно работали с системой.

•	Тестирование и отладка: тестирование и отладка системы ввода-вывода, чтобы убедиться, что она работает корректно и без ошибок.

•	Преимущества организации ввода-вывода в информационной системе включают:

•	Удобство использования: правильно организованный ввод-вывод позволяет пользователям легко и удобно вводить и выводить данные.

•	Эффективность: правильно организованный ввод-вывод позволяет ускорить процесс ввода и вывода данных, что повышает эффективность работы системы.

•	Надежность: правильно организованный ввод-вывод позволяет избежать ошибок при вводе и выводе данных, что повышает надежность системы.

•	Недостатки организации ввода-вывода в информационной системе включают:

•	Сложность: организация ввода-вывода может быть сложной задачей, особенно если система имеет множество различных устройств ввода-вывода.

•	Ограниченность: некоторые устройства ввода-вывода могут быть ограничены в своих возможностях, что может ограничить функциональность системы.

•	Затраты: организация ввода-вывода может потребовать дополнительных затрат на приобретение и настройку устройств ввода-вывода.

•	В целом, организация ввода-вывода в информационной системе является важным этапом разработки системы, который позволяет управлять данными, поступающими в систему и выходящими из нее. Правильно организованный ввод-вывод позволяет повысить удобство использования, эффективность и надежность системы.
Вопрос №2: Юзабилити тестирование: понятие, основные подходы планирования и разработки программных продуктов.
•	Юзабилити-тестирование (usability testing) - это процесс оценки удобства использования программного обеспечения или веб-сайта с точки зрения пользователя. Оно позволяет выявить проблемы и недостатки в интерфейсе, навигации, функциональности и других аспектах продукта, которые могут затруднять его использование.

•	Основные подходы к планированию и разработке программных продуктов с учетом юзабилити включают:

•	Исследование требований: проведение исследований требований пользователей к продукту, чтобы определить, какие функции и возможности они ожидают от продукта.

•	Проектирование интерфейса: разработка интерфейса продукта с учетом требований пользователей и лучших практик юзабилити.

•	Тестирование прототипов: создание прототипов продукта и проведение тестирования с участием пользователей, чтобы выявить проблемы и недостатки в интерфейсе и функциональности.

•	Анализ результатов: анализ результатов тестирования и внесение изменений в продукт на основе полученных данных.

•	Оценка результатов: оценка результатов тестирования и принятие решения о готовности продукта к выпуску.

•	Преимущества юзабилити-тестирования включают:

•	Улучшение удобства использования: выявление проблем и недостатков в интерфейсе и функциональности продукта позволяет улучшить его удобство использования.

•	Повышение эффективности: улучшение удобства использования продукта позволяет пользователям быстрее и эффективнее выполнять задачи.

•	Увеличение удовлетворенности пользователей: улучшение удобства использования продукта повышает удовлетворенность пользователей и увеличивает вероятность повторных покупок.

•	Снижение затрат на поддержку: выявление проблем и недостатков в продукте на ранних стадиях разработки позволяет снизить затраты на поддержку и исправление ошибок.

•	Недостатки юзабилити-тестирования включают:

•	Высокая стоимость: проведение юзабилити-тестирования может быть дорогостоящим, особенно если требуется привлечение большого количества пользователей.

•	Ограниченность: результаты тестирования могут быть ограничены и не отражать всех возможных сценариев использования продукта.

•	Время: проведение тестирования может занять значительное время, особенно если требуется привлечение большого количества пользователей.

•	В целом, юзабилити-тестирование является важным этапом разработки программного обеспечения или веб-сайта, который позволяет улучшить удобство использования продукта и повысить удовлетворенность пользователей. Однако, проведение тестирования может быть дорогостоящим и занимать значительное время.
Практическое задание: Протестировать программу Polibiya_square, размещенной в папке C:\Документы\Экз. МДК 05.2-05.3\27, где 27 - номер билета, по принципу «белого ящика. Все необходимые файлы находятся в папке.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________



ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 28
Вопрос №1: Разработка приложений для моделирования процессов.
•	Разработка приложений для моделирования процессов - это процесс создания программного обеспечения, которое позволяет имитировать и анализировать различные процессы в реальном мире. Такие приложения могут использоваться в различных областях, включая науку, инженерию, медицину, финансы и другие.

•	Основные этапы разработки приложений для моделирования процессов включают:

•	Анализ требований: определение целей и задач проекта, а также требований к функциональности приложения.

•	Проектирование: разработка архитектуры приложения, определение структуры данных и алгоритмов.

•	Кодирование: написание исходного кода приложения на выбранном языке программирования.

•	Тестирование: проверка работоспособности и корректности приложения, выявление и исправление ошибок.

•	Развертывание: установка и настройка приложения на целевой системе.

•	Поддержка: обновление и улучшение приложения, исправление ошибок и добавление новых функций.

•	При разработке приложений для моделирования процессов необходимо учитывать следующие факторы:

•	Точность моделирования: приложение должно точно воспроизводить реальные процессы и явления.

•	Гибкость: приложение должно быть гибким и адаптивным, чтобы учитывать изменения в требованиях и условиях.

•	Масштабируемость: приложение должно быть способно обрабатывать большие объемы данных и работать с высокой нагрузкой.

•	Безопасность: приложение должно обеспечивать безопасность данных и защиту от несанкционированного доступа.

•	Удобство использования: приложение должно быть удобным и интуитивно понятным для пользователей.

•	Документированность: приложение должно иметь хорошо документированный код и инструкции по использованию.

•	Разработка приложений для моделирования процессов является сложным и многогранным процессом, который требует высокой квалификации и опыта разработчиков. Однако, правильно разработанное приложение может значительно повысить эффективность и точность анализа и прогнозирования различных процессов в реальном мире.
Вопрос №2: Понятие утверждений и их параметры. Модели и основные виды утверждений. Понятие и категории директив.
Практическое задание: 	Разработать программу решения уравнения ax^2+ bx +c = 0, где a, b, c – любые вещественные числа. Для разработанной программы сформировать тестовые сценарии. 

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________




ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 29
Вопрос №1: Настройки среды разработки информационной системы.
•	Настройки среды разработки информационной системы - это процесс настройки и конфигурации программного и аппаратного обеспечения, необходимого для разработки и тестирования программного обеспечения. Этот процесс включает в себя установку и настройку операционной системы, среды разработки, инструментов разработки, баз данных, серверов приложений и других компонентов, необходимых для создания и тестирования программного обеспечения.

•	Основные этапы настройки среды разработки информационной системы включают:

•	Установка операционной системы: выбор и установка подходящей операционной системы, которая будет использоваться для разработки и тестирования программного обеспечения.

•	Установка среды разработки: выбор и установка среды разработки, которая будет использоваться для написания, компиляции и отладки кода.

•	Установка инструментов разработки: выбор и установка необходимых инструментов разработки, таких как компиляторы, отладчики, редакторы кода и другие инструменты, которые помогут в процессе разработки программного обеспечения.

•	Установка баз данных: выбор и установка подходящей базы данных, которая будет использоваться для хранения и обработки данных в разрабатываемом программном обеспечении.

•	Установка серверов приложений: выбор и установка серверов приложений, которые будут использоваться для развертывания и управления программным обеспечением.

•	Настройка сетевых параметров: настройка сетевых параметров, таких как IP-адреса, порты и протоколы, чтобы обеспечить правильную работу программного обеспечения в сети.

•	Тестирование и отладка: тестирование и отладка программного обеспечения, чтобы убедиться, что оно работает корректно и без ошибок.

•	Преимущества настройки среды разработки информационной системы включают:

•	Удобство использования: правильно настроенная среда разработки позволяет разработчикам легко и удобно работать с программным обеспечением.

•	Эффективность: правильно настроенная среда разработки позволяет ускорить процесс разработки и тестирования программного обеспечения.

•	Надежность: правильно настроенная среда разработки позволяет избежать ошибок и проблем, которые могут возникнуть при разработке и тестировании программного обеспечения.

•	Недостатки настройки среды разработки информационной системы включают:

•	Сложность: настройка среды разработки может быть сложной задачей, особенно если требуется настройка большого количества компонентов.

•	Затраты: настройка среды разработки может потребовать дополнительных затрат на приобретение и настройку программного и аппаратного обеспечения.

•	Ограниченность: некоторые настройки среды разработки могут быть ограничены в своих возможностях, что может ограничить функциональность программного обеспечения.

•	В целом, настройка среды разработки информационной системы является важным этапом разработки программного обеспечения, который позволяет создать удобную и эффективную среду для разработки и тестирования программного обеспечения. Правильно настроенная среда разработки позволяет избежать ошибок и проблем, которые могут возникнуть при разработке и тестировании программного обеспечения.
Вопрос №2: Интеграционное тестирование. Понятие, необходимость интеграционного тестирования, основные методы, критерии входа и выхода для интеграционного тестирования.
•	Интеграционное тестирование (Integration Testing) - это процесс проверки взаимодействия между различными компонентами программного обеспечения. Оно проводится после того, как каждый компонент был протестирован отдельно, чтобы убедиться, что они корректно взаимодействуют друг с другом.

•	Необходимость интеграционного тестирования обусловлена тем, что ошибки в интеграции компонентов могут привести к серьезным проблемам в работе системы. Например, если два компонента не могут корректно обмениваться данными, это может привести к потере или искажению информации.

•	Основные методы интеграционного тестирования включают:

•	Тестирование взаимодействия: проверка того, что компоненты корректно обмениваются данными и выполняют свои функции в соответствии с требованиями.

•	Тестирование совместимости: проверка того, что компоненты совместимы друг с другом и могут работать вместе без конфликтов.

•	Тестирование производительности: проверка того, что система работает быстро и эффективно при взаимодействии компонентов.

•	Критерии входа и выхода для интеграционного тестирования могут быть различными в зависимости от конкретной системы и требований заказчика. Однако, обычно они включают:

•	Вход:

•	- Компоненты, которые должны быть протестированы.
•	- Требования к интеграции компонентов.
•	- Данные, которые должны быть использованы для тестирования.

•	Выход:

•	- Результаты тестирования, которые должны быть представлены в виде отчета.
•	- Ошибки, которые были обнаружены в процессе тестирования.
•	- Рекомендации по улучшению интеграции компонентов.

•	Интеграционное тестирование является важным этапом разработки программного обеспечения, который позволяет убедиться в корректной работе системы в целом. Оно помогает выявить ошибки в интеграции компонентов и предотвратить возможные проблемы в работе системы.
Практическое задание: Провести нагрузочное тестирование на программу Parser_alf_oper по алгоритму. Все необходимые файлы находятся в папке C:\Документы\Экз. МДК 05.2-05.3\29, где 29 - номер билета.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________

 


ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 30
Вопрос №1: Формирование репозитория проекта информационной системы.\
Репозиторий проекта информационной системы - это хранилище, в котором хранятся все данные, связанные с проектом, включая исходный код, документацию, артефакты тестирования, изменения версий и другие материалы. Формирование репозитория проекта является важным этапом жизненного цикла разработки программного обеспечения, который позволяет организовать и структурировать все данные, связанные с проектом, и обеспечить их доступность для всех участников проекта.

Основные этапы формирования репозитория проекта информационной системы включают:

1. Определение структуры репозитория: определение структуры репозитория, которая будет использоваться для хранения всех данных, связанных с проектом.

2. Создание папок и файлов: создание папок и файлов в соответствии с определенной структурой репозитория.

3. Загрузка исходного кода: загрузка исходного кода проекта в репозиторий.

4. Загрузка документации: загрузка документации, связанной с проектом, в репозиторий.

5. Загрузка артефактов тестирования: загрузка артефактов тестирования, таких как тестовые случаи, результаты тестирования и отчеты, в репозиторий.

6. Загрузка изменений версий: загрузка изменений версий проекта в репозиторий.

7. Управление доступом: настройка прав доступа к репозиторию для различных участников проекта.

Преимущества формирования репозитория проекта информационной системы включают:

1. Организация и структурирование данных: репозиторий позволяет организовать и структурировать все данные, связанные с проектом, что упрощает их поиск и использование.

2. Управление версиями: репозиторий позволяет управлять версиями проекта, что позволяет отслеживать изменения и возвращаться к предыдущим версиям при необходимости.

3. Совместная работа: репозиторий позволяет нескольким участникам проекта работать над проектом одновременно, обмениваться данными и отслеживать изменения.

4. Безопасность: репозиторий обеспечивает безопасность данных, защищая их от несанкционированного доступа и изменений.

Недостатки формирования репозитория проекта информационной системы включают:

1. Затраты на создание и поддержку: формирование репозитория требует затрат на создание и поддержку, включая приобретение и настройку программного обеспечения для управления репозиторием.

2. Ограниченность: репозиторий может быть ограничен в своих возможностях, что может ограничить функциональность проекта.

3. Сложность: формирование репозитория может быть сложным процессом, особенно если требуется настройка большого количества компонентов.

В целом, формирование репозитория проекта информационной системы является важным этапом жизненного цикла разработки программного обеспечения, который позволяет организовать и структурировать все данные, связанные с проектом, и обеспечить их доступность для всех участников проекта. Правильно сформированный репозиторий позволяет упростить работу над проектом, обеспечить безопасность данных и управление версиями.
Вопрос №2: Классификация видов тестирования.
Существует множество видов тестирования, которые могут быть классифицированы по различным критериям. Некоторые из наиболее распространенных классификаций видов тестирования включают:

1. По области применения:

   - Функциональное тестирование: проверка соответствия функциональности программного обеспечения требованиям заказчика.
   - Нефункциональное тестирование: проверка нефункциональных характеристик программного обеспечения, таких как производительность, надежность, безопасность и т.д.

2. По уровню тестирования:

   - Модульное тестирование: проверка отдельных модулей программного обеспечения.
   - Интеграционное тестирование: проверка взаимодействия между модулями программного обеспечения.
   - Системное тестирование: проверка работы всей системы в целом.

3. По методу тестирования:

   - Ручное тестирование: тестирование, которое выполняется вручную тестировщиком.
   - Автоматизированное тестирование: тестирование, которое выполняется с помощью специальных инструментов и программ.

4. По стадии жизненного цикла разработки:

   - Альфа-тестирование: тестирование, которое проводится на стадии разработки программного обеспечения.
   - Бета-тестирование: тестирование, которое проводится на стадии подготовки программного обеспечения к выпуску.

5. По типу тестирования:

   - Тестирование на основе покрытия: проверка того, что все части программного обеспечения были протестированы.
   - Тестирование на основе требований: проверка соответствия программного обеспечения требованиям заказчика.
   - Тестирование на основе сценариев использования: проверка работы программного обеспечения в различных сценариях использования.

Это лишь некоторые из возможных классификаций видов тестирования. В зависимости от конкретной ситуации и требований заказчика могут быть использованы и другие классификации.
Практическое задание: Произвести функциональное тестирование требований программы TaskMaster, размещенной в папке C:\Документы\Экз. МДК 05.2-5.3\30, где 30 - номер билета. Все необходимые файлы находятся в папке.

    Преподаватель Вековенко М.В, Прилепская Т.В.

_______________________________________________________________________


